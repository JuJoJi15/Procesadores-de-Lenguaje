
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\007\002\000\002\003\007" +
    "\000\002\006\003\000\002\006\006\000\002\006\006\000" +
    "\002\006\006\000\002\006\006\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\004\005" +
    "\000\002\004\007\000\002\004\005\000\002\004\003\000" +
    "\002\005\005\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\022\011\016\013\011\015\012\021\006\022" +
    "\004\023\007\024\013\026\005\001\002\000\004\011\073" +
    "\001\002\000\016\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\067\020\ufffb\001\002\000\004\011\064\001\002\000\004" +
    "\011\061\001\002\000\014\004\021\005\022\006\024\007" +
    "\023\020\060\001\002\000\006\013\041\025\037\001\002" +
    "\000\006\013\041\025\037\001\002\000\004\011\034\001" +
    "\002\000\024\002\uffff\011\uffff\013\uffff\015\uffff\021\uffff" +
    "\022\uffff\023\uffff\024\uffff\026\uffff\001\002\000\024\002" +
    "\032\011\016\013\011\015\012\021\006\022\004\023\007" +
    "\024\013\026\005\001\002\000\022\011\016\013\011\015" +
    "\012\021\006\022\004\023\007\024\013\026\017\001\002" +
    "\000\016\004\ufffb\005\ufffb\006\ufffb\007\ufffb\012\ufffb\020" +
    "\ufffb\001\002\000\014\004\021\005\022\006\024\007\023" +
    "\012\025\001\002\000\022\011\016\013\011\015\012\021" +
    "\006\022\004\023\007\024\013\026\017\001\002\000\022" +
    "\011\016\013\011\015\012\021\006\022\004\023\007\024" +
    "\013\026\017\001\002\000\022\011\016\013\011\015\012" +
    "\021\006\022\004\023\007\024\013\026\017\001\002\000" +
    "\022\011\016\013\011\015\012\021\006\022\004\023\007" +
    "\024\013\026\017\001\002\000\016\004\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\012\ufff4\020\ufff4\001\002\000\016\004\ufff1" +
    "\005\ufff1\006\ufff1\007\ufff1\012\ufff1\020\ufff1\001\002\000" +
    "\016\004\ufff0\005\ufff0\006\ufff0\007\ufff0\012\ufff0\020\ufff0" +
    "\001\002\000\016\004\ufff2\005\ufff2\006\024\007\023\012" +
    "\ufff2\020\ufff2\001\002\000\016\004\ufff3\005\ufff3\006\024" +
    "\007\023\012\ufff3\020\ufff3\001\002\000\004\002\000\001" +
    "\002\000\024\002\001\011\001\013\001\015\001\021\001" +
    "\022\001\023\001\024\001\026\001\001\002\000\022\011" +
    "\016\013\011\015\012\021\006\022\004\023\007\024\013" +
    "\026\017\001\002\000\014\004\021\005\022\006\024\007" +
    "\023\012\036\001\002\000\016\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\012\ufffa\020\ufffa\001\002\000\012\014\uffea\016" +
    "\uffea\017\uffea\020\uffea\001\002\000\010\016\050\017\047" +
    "\020\051\001\002\000\004\025\037\001\002\000\012\014" +
    "\uffec\016\uffec\017\043\020\uffec\001\002\000\004\025\044" +
    "\001\002\000\012\014\uffeb\016\uffeb\017\uffeb\020\uffeb\001" +
    "\002\000\006\014\046\017\043\001\002\000\012\014\uffed" +
    "\016\uffed\017\uffed\020\uffed\001\002\000\004\013\053\001" +
    "\002\000\016\004\ufff6\005\ufff6\006\ufff6\007\ufff6\012\ufff6" +
    "\020\ufff6\001\002\000\004\025\037\001\002\000\012\014" +
    "\uffef\016\uffef\017\043\020\uffef\001\002\000\004\025\037" +
    "\001\002\000\006\014\055\017\043\001\002\000\012\014" +
    "\uffee\016\uffee\017\uffee\020\uffee\001\002\000\010\014\057" +
    "\017\047\020\051\001\002\000\016\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\012\ufff5\020\ufff5\001\002\000\024\002\ufffe" +
    "\011\ufffe\013\ufffe\015\ufffe\021\ufffe\022\ufffe\023\ufffe\024" +
    "\ufffe\026\ufffe\001\002\000\022\011\016\013\011\015\012" +
    "\021\006\022\004\023\007\024\013\026\017\001\002\000" +
    "\014\004\021\005\022\006\024\007\023\012\063\001\002" +
    "\000\016\004\ufff7\005\ufff7\006\ufff7\007\ufff7\012\ufff7\020" +
    "\ufff7\001\002\000\022\011\016\013\011\015\012\021\006" +
    "\022\004\023\007\024\013\026\017\001\002\000\014\004" +
    "\021\005\022\006\024\007\023\012\066\001\002\000\016" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\012\ufff8\020\ufff8\001" +
    "\002\000\022\011\016\013\011\015\012\021\006\022\004" +
    "\023\007\024\013\026\017\001\002\000\014\004\021\005" +
    "\022\006\024\007\023\020\ufffd\001\002\000\004\020\072" +
    "\001\002\000\024\002\ufffc\011\ufffc\013\ufffc\015\ufffc\021" +
    "\ufffc\022\ufffc\023\ufffc\024\ufffc\026\ufffc\001\002\000\022" +
    "\011\016\013\011\015\012\021\006\022\004\023\007\024" +
    "\013\026\017\001\002\000\014\004\021\005\022\006\024" +
    "\007\023\012\075\001\002\000\016\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\012\ufff9\020\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\010\002\014\003\013\006\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\055\005\041\001" +
    "\001\000\006\004\037\005\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\032\006\007\001\001\000" +
    "\004\006\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\030\001\001\000\004\006\027\001\001\000" +
    "\004\006\026\001\001\000\004\006\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\051\001\001\000\002\001" +
    "\001\000\004\005\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\067\001\001\000\004\007\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\073\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    
    ArrayList<ArrayList<Double>> matrizA = new ArrayList();
    ArrayList<Double> fila = new ArrayList();
    boolean excepcion = false;

    public double[][] crearMatriz(){
        double[][] matriz = null;

        try{
            matriz = Matrices.toArray(matrizA);
        }catch(Exception e){
            System.out.println(Matrices.ERROR_FILAS);
        }
        return matriz;
    }



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // listaExp ::= listaExp linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= listaExp EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listaExp ::= linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // linea ::= exp PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] e = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 TablaSimbolos.insertar(id,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // linea ::= IDENT ASIG exp NT$0 PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] e = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp ::= IDENT 
            {
              double[][] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = TablaSimbolos.buscar(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= PRINT AP exp CP 
            {
              double[][] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[][] e = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(e != null && !excepcion){Matrices.print(e);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= TRANSPUESTA AP exp CP 
            {
              double[][] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[][] e = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(e != null && !excepcion){RESULT = Matrices.transpuesta(e);}    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= INVERSA AP exp CP 
            {
              double[][] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[][] e = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(e != null && Matrices.filas(e)==Matrices.columnas(e) && !excepcion){RESULT = Matrices.inversa(e);}else{System.out.println(Matrices.ERROR_INVERSA); excepcion = true;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= ADJUNTA AP exp CP 
            {
              double[][] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[][] e = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(e != null && Matrices.filas(e)==Matrices.columnas(e) && !excepcion){RESULT = Matrices.adjunta(e);}else{System.out.println(Matrices.ERROR_ADJUNTA); excepcion = true;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= AC matriz CC 
            {
              double[][] RESULT =null;
		 RESULT = crearMatriz(); matrizA.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= ALL matriz CLL 
            {
              double[][] RESULT =null;
		 RESULT = crearMatriz(); matrizA.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= AP exp CP 
            {
              double[][] RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[][] e = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp MAS exp 
            {
              double[][] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] e1 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] e2 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(Matrices.filas(e1) == Matrices.filas(e2) && Matrices.columnas(e1) == Matrices.columnas(e2)){RESULT= Matrices.suma(e1,e2);}else{System.out.println(Matrices.ERROR_SUMA);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp MENOS exp 
            {
              double[][] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] e1 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] e2 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(Matrices.filas(e1) == Matrices.filas(e2) && Matrices.columnas(e1) == Matrices.columnas(e2)){RESULT= Matrices.suma(e1,Matrices.producto(-1,e2));}else{System.out.println(Matrices.ERROR_SUMA);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp POR exp 
            {
              double[][] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] e1 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] e2 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(Matrices.columnas(e1) == Matrices.filas(e2)){RESULT= Matrices.producto(e1,e2);}else{System.out.println(Matrices.ERROR_PROD);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp DIV exp 
            {
              double[][] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] e1 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] e2 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(Matrices.columnas(e1) == Matrices.filas(e2)){RESULT= Matrices.producto(e1,Matrices.inversa(e2));}else{System.out.println(Matrices.ERROR_PROD);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // matriz ::= matriz PYC fila 
            {
              Object RESULT =null;
		 matrizA.add((ArrayList<Double>)fila.clone()); fila.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // matriz ::= matriz COMA ALL fila CLL 
            {
              Object RESULT =null;
		 matrizA.add((ArrayList<Double>)fila.clone()); fila.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // matriz ::= ALL fila CLL 
            {
              Object RESULT =null;
		 matrizA.add((ArrayList<Double>)fila.clone()); fila.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // matriz ::= fila 
            {
              Object RESULT =null;
		 matrizA.add((ArrayList<Double>)fila.clone()); fila.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // fila ::= fila COMA NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double n = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 fila.add(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fila",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // fila ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double n = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 fila.add(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fila",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

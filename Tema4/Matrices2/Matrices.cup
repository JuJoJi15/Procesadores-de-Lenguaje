// Matrices 2

import java_cup.runtime.*;
import java.util.ArrayList;

action code {:

    ArrayList<ArrayList<Double>> matrizA = new ArrayList();
    ArrayList<Double> fila = new ArrayList();
    boolean excepcion = false;

    public double[][] crearMatriz(){
        double[][] matriz = null;

        try{
            matriz = Matrices.toArray(matrizA);
        }catch(Exception e){
            System.out.println(Matrices.ERROR_FILAS);
        }
        return matriz;
    }

    public double[] crearVector(){
        double[] vector = null;

        try{
            vector = Matrices.toVector(fila);
        }catch(Exception e){
            System.out.println(Matrices.ERROR_FILAS);
        }
        return vector;
    }

:}

parser code {:  

    public void syntax_error(Symbol cur_token){
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        System.err.println("Syntax error en linea" + Matrices.lex.getLine() + ", columna " + Matrices.lex.getColumn() + " con el token "+ sym.terminalNames[cur_token.sym]);
        // report_error("Syntax error", null);
        done_parsing();
    }


:}
/* Terminales */

terminal MAS,MENOS,POR,DIV,ASIG,CONCATENA;
terminal ALL,CLL,AP,CP,AC,CC;
terminal COMA,PYC;
terminal INVERSA,TRANSPUESTA,ADJUNTA,PRINT;
terminal double[][] MATRIZ;
terminal double[] VECTOR;
terminal String IDENT;
terminal Double NUMERO;

/* No Terminales */

non terminal listaExp;
non terminal linea;
non terminal double[][] matriz;
non terminal double[] vector;
non terminal columna;
non terminal fila;
non terminal funcion;

/* Precedencia */

precedence left MAS;
precedence left POR;
precedence left AP,CP;
precedence left CONCATENA;

/* Gramatica */

listaExp  ::= listaExp linea      
            | linea 
            ;

linea     ::= IDENT:id ASIG matriz:m PYC  {: TablaSimbolos.insertar(id,m); :}
            | IDENT:id AP NUMERO:n1 COMA NUMERO:n2 CP ASIG matriz:m PYC {: TablaSimbolos.insertar(id,Matrices.completar(m,n1.intValue(),n2.intValue())); :}
            | IDENT:id ASIG vector:v PYC  {: TablaSimbolos.insertarVector(id,v); :}
            | funcion
            ;

funcion   ::= PRINT AP matriz:m CP PYC {: Matrices.print(m); :}
            | PRINT AP vector:v CP PYC {: Matrices.print(v); :}
            ;

matriz    ::= ALL columna CLL {: RESULT = crearMatriz(); matrizA.clear(); :}
            | MATRIZ:m {: RESULT = m; :}
            | matriz:m CONCATENA vector:v {: RESULT = Matrices.concatena(m,v); :}
            | NUMERO:n MAS matriz:m {: RESULT = Matrices.suma(n,m); :}
            | matriz:m1 MAS matriz:m2 {: RESULT = Matrices.suma(m1,m2); :}
            | vector:v1 POR vector:v2 {: RESULT = Matrices.producto(v1,v2); :}
            | vector:v POR matriz:m {: RESULT = Matrices.producto(v,m); :}
            | matriz:m POR vector:v {: RESULT = Matrices.producto(m,v); :}
            | matriz:m1 POR MATRIZ:m AP NUMERO:n1 COMA NUMERO:n2 CP {: if(n1>Matrices.filas(m)){System.err.println(Matrices.ERROR_FILAS_INSUF);}else if(n2>Matrices.columnas(m)){System.err.println(Matrices.ERROR_COLUM_INSUF);} 
              else{RESULT = Matrices.producto(m1,Matrices.subMatriz(m,n1.intValue(),n2.intValue()));} :}
            | MATRIZ:m AP NUMERO:n1 COMA NUMERO:n2 CP {: if(n1>Matrices.filas(m)){System.err.println(Matrices.ERROR_FILAS_INSUF);}else if(n2>Matrices.columnas(m)){System.err.println(Matrices.ERROR_COLUM_INSUF);} 
              else{RESULT = Matrices.subMatriz(m,n1.intValue(),n2.intValue());} :}
            ;

vector    ::= ALL fila CLL {: RESULT = crearVector(); fila.clear(); :}
            | VECTOR:v {: RESULT = v; :}
            | vector:v1 CONCATENA vector:v2 {: RESULT = Matrices.concatena(v1,v2); :}
            | NUMERO:n CONCATENA vector:v {: RESULT = Matrices.concatena(n,v); :}
            | vector:v CONCATENA NUMERO:n {: RESULT = Matrices.concatena(v,n); :}
            | NUMERO:n MAS vector:v {: RESULT = Matrices.suma(n,v); :}
            | vector:v1 MAS vector:v2 {: RESULT = Matrices.suma(v1,v2); :}
            ;

columna    ::= columna COMA vector:v {: matrizA.add((ArrayList<Double>)Matrices.toArrayList(v)); fila.clear(); :}
            | vector:v {: matrizA.add((ArrayList<Double>)Matrices.toArrayList(v)); fila.clear(); :}
            ;

fila      ::= fila COMA NUMERO:n {: fila.add(n);:}
            | fila COMA MENOS NUMERO:n {: fila.add(-n);:}
            | NUMERO:n       {: fila.add(n);:}
            | MENOS NUMERO:n {: fila.add(-n);:}
            ;
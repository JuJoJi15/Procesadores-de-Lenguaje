import java.io.IOException;
import java_cup.runtime.*;
parser code {:

 public void syntax_error(Symbol cur_token){
	}

 public void unrecovered_syntax_error(Symbol cur_token){
        System.err.println("Syntax error en linea" + PLXC.lex.getLine() + ", columna " + PLXC.lex.getColumna() + " con el token "+ sym.terminalNames[cur_token.sym]);
        // report_error("Syntax error", null);
        done_parsing();
    }

:}

action code {:

    private int nVar = 0;
    class ParEt{public String sv,sf;

      public ParEt(String v,String f){
        sv = v;
        sf = f;
      }

    }

    public void Error(){
        PLXC.out.println("error;");
        PLXC.out.println("halt;");
    }

    
    public String newVar(){
        String res = "t"+nVar;
        nVar++;
        return res;
    }

    TablaSimbolos tablaS = new TablaSimbolos();

:}

/* TERMINALES */

terminal            MAS, MENOS, MULT, DIVID, MENOSUNARIO, IGUAL, ASIGNA, EXC, DIF;
terminal            AP, CP, ALL, CLL;
terminal            COMA, PYC;
terminal            MAYOR,MENOR,MAYIG,MENIG;
terminal            AND, OR;
terminal            IF, ELSE, WHILE, DO, FOR, PRINT;
terminal            TIPO;
terminal String     IDENT;
terminal String     ENTERO;

/* NO TERMINALES */

    non terminal Lista_de_sent;
    non terminal Sentencia;
    non terminal Declaracion;
    non terminal String Expresion;
    non terminal ParEt Condicion;
    non terminal String etiq_salto;
    non terminal ParEt etiq_bucle;
    non terminal else_If;

/* Precedencia */

precedence left IF, ELSE, DO, WHILE, FOR, PRINT;
precedence left MAS,MENOS;
precedence left MULT,DIVID;
precedence left IGUAL, MENIG, MAYIG;
precedence left DIF, MENOR, MAYOR;
precedence left EXC, AND, OR;
precedence left IDENT, ENTERO;
precedence left MENOSUNARIO;
precedence left AP, CP;
precedence left ALL,CLL;


/* Gramatica */

Lista_de_sent ::= Sentencia
                | Lista_de_sent Sentencia
                ;
Sentencia ::= Expresion PYC  
            | Declaracion PYC
            | IF etiq_salto:e AP Condicion:c CP {: PLXC.out.println(c.sv+":"); :} Sentencia  {: PLXC.out.println("goto "+e+";");PLXC.out.println(c.sf +":"); :} else_If {: PLXC.out.println(e+":"); :}
            | WHILE etiq_salto:e {: PLXC.out.println(e+":"); :} AP Condicion:c CP {: PLXC.out.println(c.sv+":"); :} Sentencia {: PLXC.out.println("goto "+e+";");PLXC.out.println(c.sf+":"); :}
            | DO etiq_salto:e {: PLXC.out.println(e+":"); :} Sentencia WHILE AP Condicion:c CP {: PLXC.out.println(c.sv+":");PLXC.out.println("goto "+e+";"); :} PYC {: PLXC.out.println(c.sf+":"); :}  
            | FOR etiq_bucle:e AP Expresion:e1 PYC {: PLXC.out.println(e.sv+":"); :} Condicion:c PYC {: PLXC.out.println(e.sf+":"); :} Expresion:e2 {: PLXC.out.println("goto "+e.sv+" ;"); :} CP {: PLXC.out.println(c.sv+":"); :} Sentencia  {: PLXC.out.println("goto "+e.sf+";");PLXC.out.println(c.sf+":"); :}
            | PRINT AP Expresion:e CP PYC {: PLXC.out.println("print "+e+" ;"); :}
            | ALL IBloque:b Lista_de_sent CLL {: tablaS.borrarBloque(bActual); tablaS.bActual = b; :}
            ;

IBloque ::=                                              {: RESULT = tablaS.newBloque(); :}
          ;

Declaracion ::= TIPO Declaracion:d {: :}
              | ENTERO:e COMA Declaracion:d {: d.add(e);RESULT = d; :}
              | ENTERO:e {: ArrayList<String> ls = new ArrayList<>(); ls.add(e); RESULT = ls; :}
              |
              ;

Expresion ::= ENTERO:e                                   {: RESULT = e.toString(); :}
            | IDENT:i                                    {: RESULT = i; ;}
            | Expresion:e1 MAS Expresion:e2              {:
                                                             Vector<Objeto> p = new Vector<Objeto>;
                                                             p.add(e2);
                                                             RESULT = e1.metodos("suma", p);
                                                         :}
            |MENOS Expresion:e1                          {:
                                                             String vDest = newVar(); //Puede que haya que sustituir newVar pr newNumObj 
                                                             PLC.out.println(vDest + "=0-" + e1 + ";");
                                                             RESULT = vDest;
                                                         :} %prec MENOSUNARIO
            | AP Expresion:e CP                          {: RESULT = e; :}
            | IDENT:i ASIGNA exprsion:e                  {:
                                                             if (!tabla.contiene(i)) {
                                                                Error();
                                                             }
                                                             Objeto o = tabla.objeto(i);
                                                             if (!(o instanceof Instancia)) {
                                                                Error();
                                                             }
                                                             Vector<Objeto> p = new Vector<Objeto>;
                                                             p.add(e);
                                                             RESULT = o.metodos("asigna", p);
                                                         :}
            ;

Condicion ::= Expresion:e1 IGUAL Expresion:e2  {: ParEt e = new ParEt(tabla.newEtiq(),tabla.newEtiq());PLXC.out.println("if("+e1+"=="+e2+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; :}
            | Expresion:e1 DIF Expresion:e2  {: ParEt e = new ParEt(tabla.newEtiq(),tabla.newEtiq());PLXC.out.println("if("+e1+"=="+e2+") goto "+e.sf+";");PLXC.out.println("goto "+e.sv+";");RESULT = e; :}
            | Expresion:e1 MENOR Expresion:e2   {: ParEt e = new ParEt(tabla.newEtiq(),tabla.newEtiq());PLXC.out.println("if("+e1+"<"+e2+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; :}
            | Expresion:e1 MENIG Expresion:e2  {: ParEt e = new ParEt(tabla.newEtiq(),tabla.newEtiq());PLXC.out.println("if("+e1+"=="+e2+") goto "+e.sv+";");PLXC.out.println("if("+e1+"<"+e2+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; :}
            | Expresion:e1 MAYOR Expresion:e2   {: ParEt e = new ParEt(tabla.newEtiq(),tabla.newEtiq());PLXC.out.println("if("+e2+"<"+e1+") goto "+e.sf+";");PLXC.out.println("goto "+e.sv+";");RESULT = e; :}
            | Expresion:e1 MAYIG Expresion:e2 {: ParEt e = new ParEt(tabla.newEtiq(),tabla.newEtiq());PLXC.out.println("if("+e1+"=="+e2+") goto "+e.sv+";");PLXC.out.println("if("+e1+"<"+e2+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; :} 
            | EXC Condicion:c {: ParEt p = new ParEt(c.sf,c.sv);RESULT = p; :}
            | Condicion:c1 AND {: PLXC.out.println(c1.sv+":"); :} Condicion:c2 {: ParEt p = new ParEt(tabla.newEtiq(),tabla.newEtiq());PLXC.out.println(c2.sv+":"); PLXC.out.println("goto "+p.sv+";");PLXC.out.println(c1.sf+":");PLXC.out.println(c2.sf+":");PLXC.out.println("goto "+p.sf+";");RESULT = p; :}
            | Condicion:c1 OR {: PLXC.out.println(c1.sf+":"); :} Condicion:c2 {: ParEt p = new ParEt(tabla.newEtiq(),tabla.newEtiq());PLXC.out.println(c2.sf+":"); PLXC.out.println("goto "+p.sf+";");PLXC.out.println(c1.sv+":");PLXC.out.println(c2.sv+":");PLXC.out.println("goto "+p.sv+";");RESULT = p; :}
            | AP Condicion:c CP {: RESULT = c; :}
            ;


else_If        ::=  ELSE Sentencia
                 | 
                 ;
etiq_salto ::= {: RESULT = tabla.newEtiq(); :};
etiq_bucle ::= {: ParEt e = new ParEt(tabla.newEtiq(),tabla.newEtiq());RESULT = e; :};
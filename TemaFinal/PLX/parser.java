
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.IOException;
import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\014\002" +
    "\000\002\015\002\000\002\003\013\000\002\016\002\000" +
    "\002\017\002\000\002\003\012\000\002\020\002\000\002" +
    "\021\002\000\002\003\014\000\002\022\002\000\002\023" +
    "\002\000\002\024\002\000\002\025\002\000\002\003\020" +
    "\000\002\003\007\000\002\026\002\000\002\003\006\000" +
    "\002\027\002\000\002\004\005\000\002\005\005\000\002" +
    "\005\003\000\002\006\003\000\002\006\005\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\004\000\002\007\005\000\002" +
    "\007\005\000\002\007\006\000\002\007\002\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\004\000" +
    "\002\030\002\000\002\010\006\000\002\031\002\000\002" +
    "\010\006\000\002\010\005\000\002\013\004\000\002\013" +
    "\002\000\002\011\002\000\002\012\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\044\004\uffd9\005\006\006\uffd9\007\uffd9\015" +
    "\021\017\011\022\uffd9\031\013\033\004\034\022\035\007" +
    "\036\015\037\014\040\005\041\010\042\023\043\024\001" +
    "\002\000\004\015\uffca\001\002\000\042\004\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\011\uffe2\012\157\014\uffe2\016\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\001\002\000\052\004\uffd9\005\006\006\uffd9\007" +
    "\uffd9\011\uffd9\014\uffd9\015\021\016\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\040" +
    "\005\041\010\042\023\043\024\001\002\000\004\015\uffc9" +
    "\001\002\000\040\004\uffe5\005\uffe5\006\uffe5\007\uffe5\011" +
    "\uffe5\014\uffe5\016\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\001\002\000\044\004" +
    "\uffed\005\uffed\006\uffed\007\uffed\015\uffed\017\uffed\022\uffed" +
    "\031\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040" +
    "\uffed\041\uffed\042\uffed\043\uffed\001\002\000\050\002\001" +
    "\004\001\005\001\006\001\007\001\015\001\017\001\020" +
    "\001\022\001\031\001\033\001\034\001\035\001\036\001" +
    "\037\001\040\001\041\001\042\001\043\001\001\002\000" +
    "\004\015\uffca\001\002\000\004\040\uffeb\001\002\000\004" +
    "\015\110\001\002\000\046\002\107\004\uffd9\005\006\006" +
    "\uffd9\007\uffd9\015\021\017\011\022\uffd9\031\013\033\004" +
    "\034\022\035\007\036\015\037\014\040\005\041\010\042" +
    "\023\043\024\001\002\000\014\004\057\005\050\006\054" +
    "\007\056\022\105\001\002\000\004\022\104\001\002\000" +
    "\030\004\uffd9\005\006\006\uffd9\007\uffd9\015\021\016\uffd9" +
    "\037\036\040\005\041\010\042\023\043\024\001\002\000" +
    "\044\004\uffca\005\uffca\006\uffca\007\uffca\015\uffca\017\uffca" +
    "\022\uffca\031\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\040\uffca\041\uffca\042\uffca\043\uffca\001\002\000\040" +
    "\004\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4\014\uffe4\016" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\001\002\000\040\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\011\uffe3\014\uffe3\016\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\001" +
    "\002\000\044\004\ufff6\005\ufff6\006\ufff6\007\ufff6\015\ufff6" +
    "\017\ufff6\022\ufff6\031\ufff6\033\ufff6\034\ufff6\035\ufff6\036" +
    "\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\001\002" +
    "\000\044\004\uffd9\005\006\006\uffd9\007\uffd9\015\021\017" +
    "\011\022\uffd9\031\013\033\004\034\022\035\007\036\015" +
    "\037\014\040\005\041\010\042\023\043\024\001\002\000" +
    "\004\033\030\001\002\000\004\015\031\001\002\000\042" +
    "\004\uffd9\005\006\006\uffd9\007\uffd9\011\uffd9\013\033\014" +
    "\uffd9\015\035\023\uffd9\024\uffd9\025\uffd9\026\uffd9\040\005" +
    "\041\010\042\023\043\024\001\002\000\026\004\057\005" +
    "\050\006\054\007\056\011\061\014\055\023\060\024\051" +
    "\025\052\026\062\001\002\000\042\004\uffd9\005\006\006" +
    "\uffd9\007\uffd9\011\uffd9\013\033\014\uffd9\015\035\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\040\005\041\010\042\023\043" +
    "\024\001\002\000\010\016\077\027\041\030\043\001\002" +
    "\000\046\004\uffd9\005\006\006\uffd9\007\uffd9\011\uffd9\013" +
    "\033\014\uffd9\015\035\016\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\037\036\040\005\041\010\042\023\043\024\001" +
    "\002\000\004\016\075\001\002\000\030\004\057\005\050" +
    "\006\054\007\056\011\061\014\055\016\053\023\060\024" +
    "\051\025\052\026\062\001\002\000\010\016\042\027\041" +
    "\030\043\001\002\000\042\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\011\uffd1\013\uffd1\014\uffd1\015\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\001" +
    "\002\000\012\016\uffcd\022\uffcd\027\uffcd\030\uffcd\001\002" +
    "\000\042\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf" +
    "\040\uffcf\041\uffcf\042\uffcf\043\uffcf\001\002\000\042\004" +
    "\uffd9\005\006\006\uffd9\007\uffd9\011\uffd9\013\033\014\uffd9" +
    "\015\035\023\uffd9\024\uffd9\025\uffd9\026\uffd9\040\005\041" +
    "\010\042\023\043\024\001\002\000\012\016\uffce\022\uffce" +
    "\027\041\030\uffce\001\002\000\042\004\uffd9\005\006\006" +
    "\uffd9\007\uffd9\011\uffd9\013\033\014\uffd9\015\035\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\040\005\041\010\042\023\043" +
    "\024\001\002\000\012\016\uffd0\022\uffd0\027\uffd0\030\uffd0" +
    "\001\002\000\052\004\uffd9\005\006\006\uffd9\007\uffd9\011" +
    "\uffd9\014\uffd9\015\021\016\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\040\005\041" +
    "\010\042\023\043\024\001\002\000\034\004\uffd9\005\006" +
    "\006\uffd9\007\uffd9\015\021\016\uffd9\022\uffd9\027\uffd9\030" +
    "\uffd9\040\005\041\010\042\023\043\024\001\002\000\034" +
    "\004\uffd9\005\006\006\uffd9\007\uffd9\015\021\016\uffd9\022" +
    "\uffd9\027\uffd9\030\uffd9\040\005\041\010\042\023\043\024" +
    "\001\002\000\040\004\uffdc\005\uffdc\006\uffdc\007\uffdc\011" +
    "\uffdc\014\uffdc\016\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\001\002\000\052\004" +
    "\uffd9\005\006\006\uffd9\007\uffd9\011\uffd9\014\uffd9\015\021" +
    "\016\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\040\005\041\010\042\023\043\024" +
    "\001\002\000\034\004\uffd9\005\006\006\uffd9\007\uffd9\015" +
    "\021\016\uffd9\022\uffd9\027\uffd9\030\uffd9\040\005\041\010" +
    "\042\023\043\024\001\002\000\052\004\uffd9\005\006\006" +
    "\uffd9\007\uffd9\011\uffd9\014\uffd9\015\021\016\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\040\005\041\010\042\023\043\024\001\002\000\052" +
    "\004\uffd9\005\006\006\uffd9\007\uffd9\011\uffd9\014\uffd9\015" +
    "\021\016\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\040\005\041\010\042\023\043" +
    "\024\001\002\000\034\004\uffd9\005\006\006\uffd9\007\uffd9" +
    "\015\021\016\uffd9\022\uffd9\027\uffd9\030\uffd9\040\005\041" +
    "\010\042\023\043\024\001\002\000\034\004\uffd9\005\006" +
    "\006\uffd9\007\uffd9\015\021\016\uffd9\022\uffd9\027\uffd9\030" +
    "\uffd9\040\005\041\010\042\023\043\024\001\002\000\034" +
    "\004\uffd9\005\006\006\uffd9\007\uffd9\015\021\016\uffd9\022" +
    "\uffd9\027\uffd9\030\uffd9\040\005\041\010\042\023\043\024" +
    "\001\002\000\022\004\057\005\050\006\054\007\056\016" +
    "\uffd5\022\uffd5\027\uffd5\030\uffd5\001\002\000\022\004\057" +
    "\005\050\006\054\007\056\016\uffd8\022\uffd8\027\uffd8\030" +
    "\uffd8\001\002\000\022\004\057\005\050\006\054\007\056" +
    "\016\uffd4\022\uffd4\027\uffd4\030\uffd4\001\002\000\040\004" +
    "\uffe1\005\uffe1\006\054\007\056\011\uffe1\014\uffe1\016\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\001\002\000\040\004\uffde\005\uffde\006\uffde" +
    "\007\uffde\011\uffde\014\uffde\016\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\001\002" +
    "\000\022\004\057\005\050\006\054\007\056\016\uffd7\022" +
    "\uffd7\027\uffd7\030\uffd7\001\002\000\040\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\011\uffdf\014\uffdf\016\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\001\002\000\022\004\057\005\050\006\054\007\056\016" +
    "\uffd3\022\uffd3\027\uffd3\030\uffd3\001\002\000\022\004\057" +
    "\005\050\006\054\007\056\016\uffd6\022\uffd6\027\uffd6\030" +
    "\uffd6\001\002\000\040\004\uffe0\005\uffe0\006\054\007\056" +
    "\011\uffe0\014\uffe0\016\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\001\002\000\052" +
    "\004\uffd9\005\006\006\uffd9\007\uffd9\011\uffd9\014\uffd9\015" +
    "\021\016\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\040\005\041\010\042\023\043" +
    "\024\001\002\000\040\004\uffda\005\uffda\006\uffda\007\uffda" +
    "\011\uffda\014\uffda\016\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\001\002\000\004" +
    "\022\ufff5\001\002\000\004\022\101\001\002\000\052\002" +
    "\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\015\ufff4\017\ufff4" +
    "\020\ufff4\022\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4" +
    "\001\002\000\012\016\uffd2\022\uffd2\027\uffd2\030\uffd2\001" +
    "\002\000\014\004\057\005\050\006\054\007\056\016\053" +
    "\001\002\000\052\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\015\ufffd\017\ufffd\020\ufffd\022\ufffd\031\ufffd\032\ufffd" +
    "\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041" +
    "\ufffd\042\ufffd\043\ufffd\001\002\000\052\002\ufffe\004\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\015\ufffe\017\ufffe\020\ufffe\022" +
    "\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe" +
    "\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\001\002\000" +
    "\050\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\015\uffff" +
    "\017\uffff\020\uffff\022\uffff\031\uffff\033\uffff\034\uffff\035" +
    "\uffff\036\uffff\037\uffff\040\uffff\041\uffff\042\uffff\043\uffff" +
    "\001\002\000\004\002\000\001\002\000\026\004\uffd9\005" +
    "\006\006\uffd9\007\uffd9\015\021\016\uffd9\040\005\041\010" +
    "\042\023\043\024\001\002\000\014\004\057\005\050\006" +
    "\054\007\056\016\112\001\002\000\004\022\113\001\002" +
    "\000\052\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\015" +
    "\uffee\017\uffee\020\uffee\022\uffee\031\uffee\032\uffee\033\uffee" +
    "\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042" +
    "\uffee\043\uffee\001\002\000\004\040\116\001\002\000\004" +
    "\022\uffea\001\002\000\010\012\122\021\uffe7\022\uffe7\001" +
    "\002\000\006\021\120\022\uffe8\001\002\000\004\040\116" +
    "\001\002\000\004\022\uffe9\001\002\000\030\004\uffd9\005" +
    "\006\006\uffd9\007\uffd9\015\021\021\uffd9\022\uffd9\040\005" +
    "\041\010\042\023\043\024\001\002\000\016\004\057\005" +
    "\050\006\054\007\056\021\uffe6\022\uffe6\001\002\000\004" +
    "\015\125\001\002\000\042\004\uffd9\005\006\006\uffd9\007" +
    "\uffd9\011\uffd9\013\033\014\uffd9\015\035\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\040\005\041\010\042\023\043\024\001" +
    "\002\000\010\016\127\027\041\030\043\001\002\000\044" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\015\ufffc\017\ufffc\022" +
    "\ufffc\031\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc" +
    "\040\ufffc\041\ufffc\042\ufffc\043\ufffc\001\002\000\044\004" +
    "\uffd9\005\006\006\uffd9\007\uffd9\015\021\017\011\022\uffd9" +
    "\031\013\033\004\034\022\035\007\036\015\037\014\040" +
    "\005\041\010\042\023\043\024\001\002\000\052\002\ufffb" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\015\ufffb\017\ufffb\020" +
    "\ufffb\022\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb" +
    "\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\001" +
    "\002\000\052\002\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb" +
    "\015\uffcb\017\uffcb\020\uffcb\022\uffcb\031\uffcb\032\133\033" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb" +
    "\042\uffcb\043\uffcb\001\002\000\044\004\uffd9\005\006\006" +
    "\uffd9\007\uffd9\015\021\017\011\022\uffd9\031\013\033\004" +
    "\034\022\035\007\036\015\037\014\040\005\041\010\042" +
    "\023\043\024\001\002\000\052\002\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\015\ufffa\017\ufffa\020\ufffa\022\ufffa\031" +
    "\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\042\ufffa\043\ufffa\001\002\000\052\002" +
    "\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\015\uffcc\017\uffcc" +
    "\020\uffcc\022\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\001\002\000\044\004\uffd9\005\006\006\uffd9\007\uffd9\015" +
    "\021\017\011\022\uffd9\031\013\033\004\034\022\035\007" +
    "\036\015\037\014\040\005\041\010\042\023\043\024\001" +
    "\002\000\046\004\uffd9\005\006\006\uffd9\007\uffd9\015\021" +
    "\017\011\020\140\022\uffd9\031\013\033\004\034\022\035" +
    "\007\036\015\037\014\040\005\041\010\042\023\043\024" +
    "\001\002\000\052\002\uffec\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\015\uffec\017\uffec\020\uffec\022\uffec\031\uffec\032\uffec" +
    "\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041" +
    "\uffec\042\uffec\043\uffec\001\002\000\004\015\142\001\002" +
    "\000\026\004\uffd9\005\006\006\uffd9\007\uffd9\015\021\022" +
    "\uffd9\040\005\041\010\042\023\043\024\001\002\000\014" +
    "\004\057\005\050\006\054\007\056\022\144\001\002\000" +
    "\042\004\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\040" +
    "\ufff3\041\ufff3\042\ufff3\043\ufff3\001\002\000\042\004\uffd9" +
    "\005\006\006\uffd9\007\uffd9\011\uffd9\013\033\014\uffd9\015" +
    "\035\023\uffd9\024\uffd9\025\uffd9\026\uffd9\040\005\041\010" +
    "\042\023\043\024\001\002\000\010\022\147\027\041\030" +
    "\043\001\002\000\026\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\015\ufff2\016\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\001" +
    "\002\000\026\004\uffd9\005\006\006\uffd9\007\uffd9\015\021" +
    "\016\uffd9\040\005\041\010\042\023\043\024\001\002\000" +
    "\014\004\057\005\050\006\054\007\056\016\ufff1\001\002" +
    "\000\004\016\153\001\002\000\044\004\ufff0\005\ufff0\006" +
    "\ufff0\007\ufff0\015\ufff0\017\ufff0\022\ufff0\031\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\001\002\000\044\004\uffd9\005\006\006\uffd9" +
    "\007\uffd9\015\021\017\011\022\uffd9\031\013\033\004\034" +
    "\022\035\007\036\015\037\014\040\005\041\010\042\023" +
    "\043\024\001\002\000\052\002\uffef\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\015\uffef\017\uffef\020\uffef\022\uffef\031\uffef" +
    "\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040" +
    "\uffef\041\uffef\042\uffef\043\uffef\001\002\000\040\004\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\011\uffdd\014\uffdd\016\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\001\002\000\052\004\uffd9\005\006\006\uffd9\007" +
    "\uffd9\011\uffd9\014\uffd9\015\021\016\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\040" +
    "\005\041\010\042\023\043\024\001\002\000\040\004\057" +
    "\005\050\006\054\007\056\011\uffdb\014\uffdb\016\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\001\002\000\004\015\ufff9\001\002\000\004\015" +
    "\163\001\002\000\042\004\uffd9\005\006\006\uffd9\007\uffd9" +
    "\011\uffd9\013\033\014\uffd9\015\035\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\040\005\041\010\042\023\043\024\001\002" +
    "\000\010\016\165\027\041\030\043\001\002\000\044\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\015\ufff8\017\ufff8\022\ufff8" +
    "\031\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\042\ufff8\043\ufff8\001\002\000\044\004\uffd9" +
    "\005\006\006\uffd9\007\uffd9\015\021\017\011\022\uffd9\031" +
    "\013\033\004\034\022\035\007\036\015\037\014\040\005" +
    "\041\010\042\023\043\024\001\002\000\052\002\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\015\ufff7\017\ufff7\020\ufff7" +
    "\022\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\012\002\015\003\011\004\017\007\016\001" +
    "\001\000\004\011\160\001\001\000\002\001\001\000\004" +
    "\007\155\001\001\000\004\012\140\001\001\000\002\001" +
    "\001\000\004\026\135\001\001\000\002\001\001\000\004" +
    "\011\123\001\001\000\004\027\113\001\001\000\002\001" +
    "\001\000\010\003\105\004\017\007\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\102\001\001\000" +
    "\004\011\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\025\001\001\000\010\003\026\004\017\007" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\031\010\033\001\001\000\002\001\001\000\006\007" +
    "\031\010\101\001\001\000\002\001\001\000\006\007\036" +
    "\010\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\045\001\001\000\002\001\001" +
    "\000\004\031\043\001\001\000\006\007\031\010\044\001" +
    "\001\000\002\001\001\000\006\007\031\010\046\001\001" +
    "\000\002\001\001\000\004\007\073\001\001\000\004\007" +
    "\072\001\001\000\004\007\071\001\001\000\002\001\001" +
    "\000\004\007\070\001\001\000\004\007\067\001\001\000" +
    "\004\007\066\001\001\000\004\007\065\001\001\000\004" +
    "\007\064\001\001\000\004\007\063\001\001\000\004\007" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\075\001\001\000\002\001" +
    "\001\000\004\021\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\114\006\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\120\006\116\001\001\000\002\001\001\000\004" +
    "\007\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\031\010\125\001\001\000\002\001\001\000\004" +
    "\014\127\001\001\000\010\003\130\004\017\007\016\001" +
    "\001\000\004\015\131\001\001\000\004\013\133\001\001" +
    "\000\010\003\134\004\017\007\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\136\003\011\004\017" +
    "\007\016\001\001\000\010\003\105\004\017\007\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\142" +
    "\001\001\000\002\001\001\000\004\022\144\001\001\000" +
    "\006\007\031\010\145\001\001\000\002\001\001\000\004" +
    "\023\147\001\001\000\004\007\150\001\001\000\004\024" +
    "\151\001\001\000\002\001\001\000\004\025\153\001\001" +
    "\000\010\003\154\004\017\007\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\157\001\001\000\002" +
    "\001\001\000\004\016\161\001\001\000\002\001\001\000" +
    "\006\007\031\010\163\001\001\000\002\001\001\000\004" +
    "\017\165\001\001\000\010\003\166\004\017\007\016\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




 public void syntax_error(Symbol cur_token){
	}

 public void unrecovered_syntax_error(Symbol cur_token){
        System.err.println("Syntax error en linea" + PLXC.lex.getLine() + ", columna " + PLXC.lex.getColumna() + " con el token "+ sym.terminalNames[cur_token.sym]);
        // report_error("Syntax error", null);
        done_parsing();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    private int nVar = 0;
    class ParEt{public String sv,sf;

      public ParEt(String v,String f){
        sv = v;
        sf = f;
      }

    }

    public String tipoD;
    public Tipo getTipo(){
      Tipo res = null;
      switch(tipoD){
         case "int":
            res = TInt.getInstancia();
            break;
         case "float":
            res = TFloat.getInstancia();
            break;
         case "char":
            res = TChar.getInstancia();
            break;
         default:
            tablaS.Error();
            break;
      }
      return res;
    }

    public TablaSimbolos tablaS = new TablaSimbolos();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Lista_de_sent ::= Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Lista_de_sent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_de_sent ::= Lista_de_sent Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Sentencia ::= Expresion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Sentencia ::= Declaracion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 PLXC.out.println("goto "+e+";");PLXC.out.println(c.sf +":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Sentencia ::= IF etiq_salto AP Condicion CP NT$0 Sentencia NT$1 else_If 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 PLXC.out.println(e+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.out.println(e+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencia ::= WHILE etiq_salto NT$2 AP Condicion CP NT$3 Sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 PLXC.out.println("goto "+e+";");PLXC.out.println(c.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.out.println(e+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c.sv+":");PLXC.out.println("goto "+e+";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencia ::= DO etiq_salto NT$4 Sentencia WHILE AP Condicion CP NT$5 PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 PLXC.out.println(c.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(e.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(e.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.out.println("goto "+e.sv+" ;"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 PLXC.out.println(c.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencia ::= FOR etiq_bucle AP Expresion PYC NT$6 Condicion PYC NT$7 Expresion NT$8 CP NT$9 Sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 PLXC.out.println("goto "+e.sf+";");PLXC.out.println(c.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= PRINT AP Expresion CP PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Vector<Objeto> p = new Vector<Objeto>();e.metodos("print",p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$10 ::= 
            {
              Object RESULT =null;
  tablaS.newBloque(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sentencia ::= ALL NT$10 Lista_de_sent CLL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 tablaS.borrarBloque(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$11 ::= 
            {
              ArrayList<String> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tipoD = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Declaracion ::= TIPO NT$11 Lista 
            {
              ArrayList<String> RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (ArrayList<String>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 tipoD = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Lista ::= Lista_aux COMA Lista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Lista ::= Lista_aux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Lista_aux ::= IDENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                              if(!tablaS.contiene(i)){
                                                                  Instancia o = new Instancia(i,getTipo(),tablaS.bActual,true);
                                                                  tablaS.addObj(o);
                                                               }else{ 
                                                                  tablaS.Error();
                                                               }
                                                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_aux",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Lista_aux ::= IDENT ASIGNA Expresion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                                                             if(!tablaS.contiene(i)){
                                                                  Instancia o = new Instancia(i,getTipo(),tablaS.bActual,true);
                                                                  tablaS.addObj(o);
                                                               }else{ 
                                                                  tablaS.Error();
                                                               }
                                                             Objeto o = tablaS.objeto(i);
                                                             if (!(o instanceof Instancia)) {
                                                                tablaS.Error();
                                                             }
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             p.add(e);
                                                             o.metodos("asigna", p);
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_aux",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expresion ::= ENTERO 
            {
              Objeto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Instancia o = new Instancia(e,TInt.getInstancia(),tablaS.bActual,false);RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expresion ::= FLOAT 
            {
              Objeto RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Instancia o = new Instancia(f,TFloat.getInstancia(),tablaS.bActual,false);RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expresion ::= CHAR 
            {
              Objeto RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Instancia o = new Instancia(c,TChar.getInstancia(),tablaS.bActual,false);RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expresion ::= IDENT 
            {
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tablaS.objeto(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expresion ::= Expresion MAS Expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             if(((Instancia) e1).getTipo() == TFloat.getInstancia()){
                                                                p.add(e2);
                                                                RESULT = e1.metodos("suma", p);
                                                             }else if(((Instancia) e2).getTipo() == TFloat.getInstancia()){
                                                                p.add(e1);
                                                                RESULT = e2.metodos("suma", p);
                                                             }else{
                                                                p.add(e2);
                                                                RESULT = e1.metodos("suma", p);
                                                             }
                                                             
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expresion ::= Expresion MENOS Expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             if(((Instancia) e1).getTipo() == TFloat.getInstancia()){
                                                                p.add(e2);
                                                                RESULT = e1.metodos("resta", p);
                                                             }else if(((Instancia) e2).getTipo() == TFloat.getInstancia()){
                                                                p.add(e1);
                                                                RESULT = e2.metodos("resta", p);
                                                             }else{
                                                                p.add(e2);
                                                                RESULT = e1.metodos("resta", p);
                                                             }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expresion ::= Expresion MULT Expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             if(((Instancia) e1).getTipo() == TFloat.getInstancia()){
                                                                p.add(e2);
                                                                RESULT = e1.metodos("multiplicar", p);
                                                             }else if(((Instancia) e2).getTipo() == TFloat.getInstancia()){
                                                                p.add(e1);
                                                                RESULT = e2.metodos("multiplicar", p);
                                                             }else{
                                                                p.add(e2);
                                                                RESULT = e1.metodos("multiplicar", p);
                                                             }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expresion ::= Expresion DIVID Expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             if(((Instancia) e1).getTipo() == TFloat.getInstancia()){
                                                                p.add(e2);
                                                                RESULT = e1.metodos("dividir", p);
                                                             }else if(((Instancia) e2).getTipo() == TFloat.getInstancia()){
                                                                p.add(e1);
                                                                RESULT = e2.metodos("dividir", p);
                                                             }else{
                                                                p.add(e2);
                                                                RESULT = e1.metodos("dividir", p);
                                                             }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expresion ::= MENOS Expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             RESULT = e1.metodos("menosUnario",p);
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expresion ::= AP Expresion CP 
            {
              Objeto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expresion ::= IDENT ASIGNA Expresion 
            {
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             if (!tablaS.contiene(i)) {
                                                                tablaS.Error();
                                                             }
                                                             Objeto o = tablaS.objeto(i);
                                                             if (!(o instanceof Instancia)) {
                                                                tablaS.Error();
                                                             }
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             p.add(e);
                                                             RESULT = o.metodos("asigna", p);
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expresion ::= AP TIPO CP Expresion 
            {
              Objeto RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                            Vector<Objeto> p = new Vector<Objeto>();
                                                            switch(t){
                                                                case "int":
                                                                    p.add(TInt.getInstancia());
                                                                    break;
                                                                case "float":
                                                                    p.add(TFloat.getInstancia());
                                                                    break;
                                                                case "char":
                                                                    p.add(TChar.getInstancia());
                                                                    break;
                                                                default:
                                                                    TablaSimbolos.Error();
                                                                    break;
                                                            }
                                                            RESULT = e.metodos("convertir", p);
            
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expresion ::= 
            {
              Objeto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Condicion ::= Expresion IGUAL Expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e1.getNombre()+"=="+e2.getNombre()+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Condicion ::= Expresion DIF Expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e1.getNombre()+"=="+e2.getNombre()+") goto "+e.sf+";");PLXC.out.println("goto "+e.sv+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Condicion ::= Expresion MENOR Expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e1.getNombre()+"<"+e2.getNombre()+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Condicion ::= Expresion MENIG Expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e1.getNombre()+"=="+e2.getNombre()+") goto "+e.sv+";");PLXC.out.println("if("+e1.getNombre()+"<"+e2.getNombre()+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Condicion ::= Expresion MAYOR Expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e2.getNombre()+"<"+e1.getNombre()+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Condicion ::= Expresion MAYIG Expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e1.getNombre()+"=="+e2.getNombre()+") goto "+e.sv+";");PLXC.out.println("if("+e2.getNombre()+"<"+e1.getNombre()+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Condicion ::= NOT Condicion 
            {
              ParEt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt p = new ParEt(c.sf,c.sv);RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$12 ::= 
            {
              ParEt RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c1.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Condicion ::= Condicion AND NT$12 Condicion 
            {
              ParEt RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (ParEt) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c2 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt p = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println(c2.sv+":"); PLXC.out.println("goto "+p.sv+";");PLXC.out.println(c1.sf+":");PLXC.out.println(c2.sf+":");PLXC.out.println("goto "+p.sf+";");RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$13 ::= 
            {
              ParEt RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c1.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Condicion ::= Condicion OR NT$13 Condicion 
            {
              ParEt RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (ParEt) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c2 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt p = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println(c2.sf+":"); PLXC.out.println("goto "+p.sf+";");PLXC.out.println(c1.sv+":");PLXC.out.println(c2.sv+":");PLXC.out.println("goto "+p.sv+";");RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Condicion ::= AP Condicion CP 
            {
              ParEt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // else_If ::= ELSE Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_If",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // else_If ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_If",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // etiq_salto ::= 
            {
              String RESULT =null;
		 RESULT = tablaS.newEtiq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiq_salto",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // etiq_bucle ::= 
            {
              ParEt RESULT =null;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiq_bucle",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

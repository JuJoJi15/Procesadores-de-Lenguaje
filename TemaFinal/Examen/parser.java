
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.IOException;
import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\017\002\000\002\020\002\000\002\003\013\000" +
    "\002\021\002\000\002\022\002\000\002\003\012\000\002" +
    "\023\002\000\002\024\002\000\002\003\014\000\002\025" +
    "\002\000\002\026\002\000\002\027\002\000\002\030\002" +
    "\000\002\003\020\000\002\003\007\000\002\003\007\000" +
    "\002\003\010\000\002\031\002\000\002\003\006\000\002" +
    "\032\002\000\002\005\005\000\002\006\005\000\002\006" +
    "\003\000\002\007\003\000\002\007\005\000\002\007\006" +
    "\000\002\007\012\000\002\007\006\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\006\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\004" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\010\000\002\011\006\000\002" +
    "\011\007\000\002\011\005\000\002\011\002\000\002\010" +
    "\005\000\002\010\003\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\004\000\002\033\002\000\002" +
    "\012\006\000\002\034\002\000\002\012\006\000\002\035" +
    "\002\000\002\012\006\000\002\012\005\000\002\036\002" +
    "\000\002\012\010\000\002\037\002\000\002\012\015\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\016\004\000\002\016\002\000\002\015\004\000\002\015" +
    "\002\000\002\013\002\000\002\014\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\050\004\uffcc\005\004\006\uffcc\007\uffcc\016" +
    "\014\020\011\026\uffcc\035\013\037\010\040\016\041\027" +
    "\042\024\052\005\053\015\054\006\055\026\056\020\057" +
    "\007\060\017\001\002\000\064\004\uffcc\005\004\006\uffcc" +
    "\007\uffcc\011\uffcc\014\uffcc\016\014\017\uffcc\021\uffcc\023" +
    "\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\043\uffcc\052\005\054\006\055\026\056" +
    "\020\057\007\060\017\001\002\000\004\012\052\001\002" +
    "\000\054\004\uffdb\005\uffdb\006\uffdb\007\uffdb\011\uffdb\012" +
    "\250\014\uffdb\017\uffdb\021\uffdb\022\247\023\uffdb\024\uffdb" +
    "\025\246\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\043\uffdb\001\002\000\046\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\011\uffdd\014\uffdd\017\uffdd\021\uffdd\023" +
    "\uffdd\024\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\043\uffdd\001\002\000\004\016\uffb0\001" +
    "\002\000\050\004\uffea\005\uffea\006\uffea\007\uffea\016\uffea" +
    "\020\uffea\026\uffea\035\uffea\037\uffea\040\uffea\041\uffea\042" +
    "\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea" +
    "\060\uffea\001\002\000\014\004\034\005\035\006\033\007" +
    "\037\026\233\001\002\000\004\016\uffb0\001\002\000\034" +
    "\004\uffcc\005\004\006\uffcc\007\uffcc\016\014\017\uffcc\052" +
    "\005\053\102\054\006\055\026\056\020\057\007\060\017" +
    "\001\002\000\004\054\uffe8\001\002\000\050\004\uffb0\005" +
    "\uffb0\006\uffb0\007\uffb0\016\uffb0\020\uffb0\026\uffb0\035\uffb0" +
    "\037\uffb0\040\uffb0\041\uffb0\042\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\001\002\000\046" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\011\uffdc\014\uffdc\017" +
    "\uffdc\021\uffdc\023\uffdc\024\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\043\uffdc\001\002\000" +
    "\046\004\uffde\005\uffde\006\uffde\007\uffde\011\uffde\014\uffde" +
    "\017\uffde\021\uffde\023\uffde\024\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\043\uffde\001\002" +
    "\000\052\002\164\004\uffcc\005\004\006\uffcc\007\uffcc\016" +
    "\014\020\011\026\uffcc\035\013\037\010\040\016\041\027" +
    "\042\024\052\005\053\015\054\006\055\026\056\020\057" +
    "\007\060\017\001\002\000\054\002\001\004\001\005\001" +
    "\006\001\007\001\016\001\020\001\021\001\026\001\035" +
    "\001\037\001\040\001\041\001\042\001\052\001\053\001" +
    "\054\001\055\001\056\001\057\001\060\001\001\002\000" +
    "\004\026\163\001\002\000\004\016\145\001\002\000\004" +
    "\026\144\001\002\000\046\004\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\011\uffdf\014\uffdf\017\uffdf\021\uffdf\023\uffdf\024\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\043\uffdf\001\002\000\004\016\uffaf\001\002\000\004" +
    "\016\031\001\002\000\032\004\uffcc\005\004\006\uffcc\007" +
    "\uffcc\016\014\026\uffcc\052\005\054\006\055\026\056\020" +
    "\057\007\060\017\001\002\000\014\004\034\005\035\006" +
    "\033\007\037\026\036\001\002\000\064\004\uffcc\005\004" +
    "\006\uffcc\007\uffcc\011\uffcc\014\uffcc\016\014\017\uffcc\021" +
    "\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\043\uffcc\052\005\054\006\055" +
    "\026\056\020\057\007\060\017\001\002\000\064\004\uffcc" +
    "\005\004\006\uffcc\007\uffcc\011\uffcc\014\uffcc\016\014\017" +
    "\uffcc\021\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\043\uffcc\052\005\054" +
    "\006\055\026\056\020\057\007\060\017\001\002\000\064" +
    "\004\uffcc\005\004\006\uffcc\007\uffcc\011\uffcc\014\uffcc\016" +
    "\014\017\uffcc\021\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\043\uffcc\052" +
    "\005\054\006\055\026\056\020\057\007\060\017\001\002" +
    "\000\054\004\ufff2\005\ufff2\006\ufff2\007\ufff2\011\ufff2\013" +
    "\ufff2\014\ufff2\016\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2" +
    "\044\ufff2\045\ufff2\046\ufff2\052\ufff2\054\ufff2\055\ufff2\056" +
    "\ufff2\057\ufff2\060\ufff2\001\002\000\064\004\uffcc\005\004" +
    "\006\uffcc\007\uffcc\011\uffcc\014\uffcc\016\014\017\uffcc\021" +
    "\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\043\uffcc\052\005\054\006\055" +
    "\026\056\020\057\007\060\017\001\002\000\046\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\011\uffd6\014\uffd6\017\uffd6\021" +
    "\uffd6\023\uffd6\024\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\043\uffd6\001\002\000\054\004" +
    "\uffcc\005\004\006\uffcc\007\uffcc\011\uffcc\013\046\014\uffcc" +
    "\016\050\027\uffcc\030\uffcc\031\uffcc\032\uffcc\044\044\045" +
    "\042\046\043\052\051\054\006\055\026\056\020\057\007" +
    "\060\017\001\002\000\046\004\uffb6\005\uffb6\006\uffb6\007" +
    "\uffb6\011\uffb6\014\uffb6\017\uffb6\021\uffb6\023\uffb6\024\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\043\uffb6\001\002\000\006\052\uffaf\054\uffaf\001\002" +
    "\000\046\004\uffb5\005\uffb5\006\uffb5\007\uffb5\011\uffb5\014" +
    "\uffb5\017\uffb5\021\uffb5\023\uffb5\024\uffb5\026\uffb5\027\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\043\uffb5\001" +
    "\002\000\026\004\034\005\035\006\033\007\037\011\072" +
    "\014\070\027\071\030\066\031\067\032\073\001\002\000" +
    "\054\004\uffcc\005\004\006\uffcc\007\uffcc\011\uffcc\013\046" +
    "\014\uffcc\016\050\027\uffcc\030\uffcc\031\uffcc\032\uffcc\044" +
    "\044\045\042\046\043\052\051\054\006\055\026\056\020" +
    "\057\007\060\017\001\002\000\012\026\111\033\055\034" +
    "\057\043\056\001\002\000\060\004\uffcc\005\004\006\uffcc" +
    "\007\uffcc\011\uffcc\013\046\014\uffcc\016\050\017\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\044\044\045\042\046\043" +
    "\052\051\053\102\054\006\055\026\056\020\057\007\060" +
    "\017\001\002\000\050\004\uffb7\005\uffb7\006\uffb7\007\uffb7" +
    "\011\uffb7\012\052\014\uffb7\017\uffb7\021\uffb7\023\uffb7\024" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\043\uffb7\001\002\000\074\004\uffcc\005\004\006" +
    "\uffcc\007\uffcc\011\uffcc\013\046\014\uffcc\016\050\017\uffcc" +
    "\021\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\043\uffcc\044\044\045\042" +
    "\046\043\052\051\054\006\055\026\056\020\057\007\060" +
    "\017\001\002\000\046\004\034\005\035\006\033\007\037" +
    "\011\072\014\070\017\uffd2\021\uffd2\023\uffd2\024\uffd2\026" +
    "\uffd2\027\071\030\066\031\067\032\073\033\uffd2\034\uffd2" +
    "\043\uffd2\001\002\000\046\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\011\uffd1\014\uffd1\017\uffd1\021\uffd1\023\uffd1\024\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\055\034" +
    "\057\043\056\001\002\000\054\004\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\011\uffc2\013\uffc2\014\uffc2\016\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\044\uffc2\045\uffc2\046\uffc2\052\uffc2" +
    "\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\001\002\000" +
    "\054\004\uffbe\005\uffbe\006\uffbe\007\uffbe\011\uffbe\013\uffbe" +
    "\014\uffbe\016\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\044" +
    "\uffbe\045\uffbe\046\uffbe\052\uffbe\054\uffbe\055\uffbe\056\uffbe" +
    "\057\uffbe\060\uffbe\001\002\000\054\004\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\011\uffc0\013\uffc0\014\uffc0\016\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\044\uffc0\045\uffc0\046\uffc0\052" +
    "\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\001\002" +
    "\000\054\004\uffcc\005\004\006\uffcc\007\uffcc\011\uffcc\013" +
    "\046\014\uffcc\016\050\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\044\044\045\042\046\043\052\051\054\006\055\026\056" +
    "\020\057\007\060\017\001\002\000\046\004\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\011\uffbf\014\uffbf\017\uffbf\021\uffbf\023" +
    "\uffbf\024\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\033\055\034\uffbf\043\uffbf\001\002\000\054\004\uffcc\005" +
    "\004\006\uffcc\007\uffcc\011\uffcc\013\046\014\uffcc\016\050" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\044\044\045\042\046" +
    "\043\052\051\054\006\055\026\056\020\057\007\060\017" +
    "\001\002\000\046\004\uffbd\005\uffbd\006\uffbd\007\uffbd\011" +
    "\uffbd\014\uffbd\017\uffbd\021\uffbd\023\uffbd\024\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\055\034\057\043" +
    "\056\001\002\000\054\004\uffcc\005\004\006\uffcc\007\uffcc" +
    "\011\uffcc\013\046\014\uffcc\016\050\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\044\044\045\042\046\043\052\051\054\006" +
    "\055\026\056\020\057\007\060\017\001\002\000\046\004" +
    "\uffc1\005\uffc1\006\uffc1\007\uffc1\011\uffc1\014\uffc1\017\uffc1" +
    "\021\uffc1\023\uffc1\024\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\043\uffc1\001\002\000\064" +
    "\004\uffcc\005\004\006\uffcc\007\uffcc\011\uffcc\014\uffcc\016" +
    "\014\017\uffcc\021\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\043\uffcc\052" +
    "\005\054\006\055\026\056\020\057\007\060\017\001\002" +
    "\000\064\004\uffcc\005\004\006\uffcc\007\uffcc\011\uffcc\014" +
    "\uffcc\016\014\017\uffcc\021\uffcc\023\uffcc\024\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\043" +
    "\uffcc\052\005\054\006\055\026\056\020\057\007\060\017" +
    "\001\002\000\064\004\uffcc\005\004\006\uffcc\007\uffcc\011" +
    "\uffcc\014\uffcc\016\014\017\uffcc\021\uffcc\023\uffcc\024\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\043\uffcc\052\005\054\006\055\026\056\020\057\007" +
    "\060\017\001\002\000\064\004\uffcc\005\004\006\uffcc\007" +
    "\uffcc\011\uffcc\014\uffcc\016\014\017\uffcc\021\uffcc\023\uffcc" +
    "\024\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\043\uffcc\052\005\054\006\055\026\056\020" +
    "\057\007\060\017\001\002\000\064\004\uffcc\005\004\006" +
    "\uffcc\007\uffcc\011\uffcc\014\uffcc\016\014\017\uffcc\021\uffcc" +
    "\023\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\043\uffcc\052\005\054\006\055\026" +
    "\056\020\057\007\060\017\001\002\000\064\004\uffcc\005" +
    "\004\006\uffcc\007\uffcc\011\uffcc\014\uffcc\016\014\017\uffcc" +
    "\021\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\043\uffcc\052\005\054\006" +
    "\055\026\056\020\057\007\060\017\001\002\000\046\004" +
    "\uffc6\005\uffc6\006\uffc6\007\uffc6\011\uffc6\014\uffc6\017\uffc6" +
    "\021\uffc6\023\uffc6\024\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\043\uffc6\001\002\000\046" +
    "\004\uffc9\005\uffc9\006\uffc9\007\uffc9\011\uffc9\014\uffc9\017" +
    "\uffc9\021\uffc9\023\uffc9\024\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\033\uffc9\034\uffc9\043\uffc9\001\002\000" +
    "\046\004\uffc5\005\uffc5\006\uffc5\007\uffc5\011\uffc5\014\uffc5" +
    "\017\uffc5\021\uffc5\023\uffc5\024\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\043\uffc5\001\002" +
    "\000\046\004\uffc8\005\uffc8\006\uffc8\007\uffc8\011\uffc8\014" +
    "\uffc8\017\uffc8\021\uffc8\023\uffc8\024\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\043\uffc8\001" +
    "\002\000\046\004\uffc4\005\uffc4\006\uffc4\007\uffc4\011\uffc4" +
    "\014\uffc4\017\uffc4\021\uffc4\023\uffc4\024\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\043\uffc4" +
    "\001\002\000\046\004\uffc7\005\uffc7\006\uffc7\007\uffc7\011" +
    "\uffc7\014\uffc7\017\uffc7\021\uffc7\023\uffc7\024\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\043" +
    "\uffc7\001\002\000\004\017\107\001\002\000\030\004\034" +
    "\005\035\006\033\007\037\011\072\014\070\017\106\027" +
    "\071\030\066\031\067\032\073\001\002\000\012\017\105" +
    "\033\055\034\057\043\056\001\002\000\046\004\uffbc\005" +
    "\uffbc\006\uffbc\007\uffbc\011\uffbc\014\uffbc\017\uffbc\021\uffbc" +
    "\023\uffbc\024\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\043\uffbc\001\002\000\046\004\uffd4" +
    "\005\uffd4\006\uffd4\007\uffd4\011\uffd4\014\uffd4\017\uffd4\021" +
    "\uffd4\023\uffd4\024\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\043\uffd4\001\002\000\064\004" +
    "\uffcc\005\004\006\uffcc\007\uffcc\011\uffcc\014\uffcc\016\014" +
    "\017\uffcc\021\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\043\uffcc\052\005" +
    "\054\006\055\026\056\020\057\007\060\017\001\002\000" +
    "\046\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf\014\uffcf" +
    "\017\uffcf\021\uffcf\023\uffcf\024\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\043\uffcf\001\002" +
    "\000\032\004\ufff1\005\ufff1\006\ufff1\007\ufff1\016\ufff1\017" +
    "\ufff1\052\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1" +
    "\001\002\000\032\004\uffcc\005\004\006\uffcc\007\uffcc\016" +
    "\014\017\uffcc\052\005\054\006\055\026\056\020\057\007" +
    "\060\017\001\002\000\014\004\034\005\035\006\033\007" +
    "\037\017\ufff0\001\002\000\004\017\115\001\002\000\050" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\016\uffef\020\uffef\026" +
    "\uffef\035\uffef\037\uffef\040\uffef\041\uffef\042\uffef\052\uffef" +
    "\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef\001" +
    "\002\000\050\004\uffcc\005\004\006\uffcc\007\uffcc\016\014" +
    "\020\011\026\uffcc\035\013\037\010\040\016\041\027\042" +
    "\024\052\005\053\015\054\006\055\026\056\020\057\007" +
    "\060\017\001\002\000\056\002\uffee\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\016\uffee\020\uffee\021\uffee\026\uffee\035\uffee" +
    "\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\052\uffee\053" +
    "\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee\001\002" +
    "\000\046\004\uffc3\005\uffc3\006\uffc3\007\uffc3\011\uffc3\014" +
    "\uffc3\017\uffc3\021\uffc3\023\uffc3\024\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\043\uffc3\001" +
    "\002\000\006\052\123\054\122\001\002\000\004\051\127" +
    "\001\002\000\004\024\uffbb\001\002\000\004\024\125\001" +
    "\002\000\054\004\uffcc\005\004\006\uffcc\007\uffcc\011\uffcc" +
    "\013\046\014\uffcc\016\050\027\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\044\044\045\042\046\043\052\051\054\006\055\026" +
    "\056\020\057\007\060\017\001\002\000\046\004\uffba\005" +
    "\uffba\006\uffba\007\uffba\011\uffba\014\uffba\017\uffba\021\uffba" +
    "\023\uffba\024\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\033\055\034\057\043\056\001\002\000\004\055\130" +
    "\001\002\000\004\050\131\001\002\000\004\055\132\001" +
    "\002\000\006\024\uffb9\047\uffb9\001\002\000\006\024\uffb3" +
    "\047\134\001\002\000\004\055\140\001\002\000\004\024" +
    "\136\001\002\000\054\004\uffcc\005\004\006\uffcc\007\uffcc" +
    "\011\uffcc\013\046\014\uffcc\016\050\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\044\044\045\042\046\043\052\051\054\006" +
    "\055\026\056\020\057\007\060\017\001\002\000\046\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\011\uffb8\014\uffb8\017\uffb8" +
    "\021\uffb8\023\uffb8\024\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\033\055\034\057\043\056\001\002\000\004" +
    "\024\uffb4\001\002\000\046\004\uffd8\005\uffd8\006\033\007" +
    "\037\011\uffd8\014\uffd8\017\uffd8\021\uffd8\023\uffd8\024\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\043\uffd8\001\002\000\046\004\uffd9\005\uffd9\006\033" +
    "\007\037\011\uffd9\014\uffd9\017\uffd9\021\uffd9\023\uffd9\024" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\043\uffd9\001\002\000\046\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\011\uffd7\014\uffd7\017\uffd7\021\uffd7\023\uffd7" +
    "\024\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\043\uffd7\001\002\000\056\002\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\016\ufffc\020\ufffc\021\ufffc\026" +
    "\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc" +
    "\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060" +
    "\ufffc\001\002\000\060\004\uffcc\005\004\006\uffcc\007\uffcc" +
    "\011\uffcc\013\046\014\uffcc\016\050\017\uffcc\020\146\027" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\044\044\045\042\046\043" +
    "\052\051\054\006\055\026\056\020\057\007\060\017\001" +
    "\002\000\034\004\uffcc\005\004\006\uffcc\007\uffcc\016\014" +
    "\021\uffcc\024\uffcc\052\005\054\006\055\026\056\020\057" +
    "\007\060\017\001\002\000\030\004\034\005\035\006\033" +
    "\007\037\011\072\014\070\017\153\027\071\030\066\031" +
    "\067\032\073\001\002\000\012\017\151\033\055\034\057" +
    "\043\056\001\002\000\004\026\152\001\002\000\056\002" +
    "\uffed\004\uffed\005\uffed\006\uffed\007\uffed\016\uffed\020\uffed" +
    "\021\uffed\026\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041" +
    "\uffed\042\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed" +
    "\057\uffed\060\uffed\001\002\000\004\026\154\001\002\000" +
    "\056\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\016\uffec" +
    "\020\uffec\021\uffec\026\uffec\035\uffec\036\uffec\037\uffec\040" +
    "\uffec\041\uffec\042\uffec\052\uffec\053\uffec\054\uffec\055\uffec" +
    "\056\uffec\057\uffec\060\uffec\001\002\000\004\021\161\001" +
    "\002\000\016\004\034\005\035\006\033\007\037\021\uffca" +
    "\024\157\001\002\000\034\004\uffcc\005\004\006\uffcc\007" +
    "\uffcc\016\014\021\uffcc\024\uffcc\052\005\054\006\055\026" +
    "\056\020\057\007\060\017\001\002\000\004\021\uffcb\001" +
    "\002\000\004\017\162\001\002\000\056\002\uffeb\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\016\uffeb\020\uffeb\021\uffeb\026" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb" +
    "\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060" +
    "\uffeb\001\002\000\056\002\ufffd\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\016\ufffd\020\ufffd\021\ufffd\026\ufffd\035\ufffd\036" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\052\ufffd\053\ufffd" +
    "\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\001\002\000" +
    "\004\002\000\001\002\000\054\002\uffff\004\uffff\005\uffff" +
    "\006\uffff\007\uffff\016\uffff\020\uffff\021\uffff\026\uffff\035" +
    "\uffff\037\uffff\040\uffff\041\uffff\042\uffff\052\uffff\053\uffff" +
    "\054\uffff\055\uffff\056\uffff\057\uffff\060\uffff\001\002\000" +
    "\050\004\ufff5\005\ufff5\006\ufff5\007\ufff5\016\ufff5\020\ufff5" +
    "\026\ufff5\035\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\052" +
    "\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5" +
    "\001\002\000\050\004\uffcc\005\004\006\uffcc\007\uffcc\016" +
    "\014\020\011\026\uffcc\035\013\037\010\040\016\041\027" +
    "\042\024\052\005\053\015\054\006\055\026\056\020\057" +
    "\007\060\017\001\002\000\004\037\171\001\002\000\004" +
    "\016\172\001\002\000\054\004\uffcc\005\004\006\uffcc\007" +
    "\uffcc\011\uffcc\013\046\014\uffcc\016\050\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\044\044\045\042\046\043\052\051\054" +
    "\006\055\026\056\020\057\007\060\017\001\002\000\012" +
    "\017\174\033\055\034\057\043\056\001\002\000\004\026" +
    "\ufff4\001\002\000\004\026\176\001\002\000\056\002\ufff3" +
    "\004\ufff3\005\ufff3\006\ufff3\007\ufff3\016\ufff3\020\ufff3\021" +
    "\ufff3\026\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\042\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057" +
    "\ufff3\060\ufff3\001\002\000\004\054\201\001\002\000\004" +
    "\026\uffe7\001\002\000\012\012\206\022\205\024\uffe4\026" +
    "\uffe4\001\002\000\006\024\203\026\uffe5\001\002\000\004" +
    "\054\201\001\002\000\004\026\uffe6\001\002\000\006\054" +
    "\210\055\211\001\002\000\034\004\uffcc\005\004\006\uffcc" +
    "\007\uffcc\016\014\024\uffcc\026\uffcc\052\005\054\006\055" +
    "\026\056\020\057\007\060\017\001\002\000\016\004\034" +
    "\005\035\006\033\007\037\024\uffe3\026\uffe3\001\002\000" +
    "\004\023\217\001\002\000\004\023\212\001\002\000\010" +
    "\012\213\024\uffe2\026\uffe2\001\002\000\004\020\214\001" +
    "\002\000\034\004\uffcc\005\004\006\uffcc\007\uffcc\016\014" +
    "\021\uffcc\024\uffcc\052\005\054\006\055\026\056\020\057" +
    "\007\060\017\001\002\000\004\021\216\001\002\000\006" +
    "\024\uffe1\026\uffe1\001\002\000\006\024\uffe0\026\uffe0\001" +
    "\002\000\014\004\034\005\035\006\033\007\037\017\106" +
    "\001\002\000\004\016\222\001\002\000\054\004\uffcc\005" +
    "\004\006\uffcc\007\uffcc\011\uffcc\013\046\014\uffcc\016\050" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\044\044\045\042\046" +
    "\043\052\051\054\006\055\026\056\020\057\007\060\017" +
    "\001\002\000\012\017\224\033\055\034\057\043\056\001" +
    "\002\000\050\004\ufffb\005\ufffb\006\ufffb\007\ufffb\016\ufffb" +
    "\020\ufffb\026\ufffb\035\ufffb\037\ufffb\040\ufffb\041\ufffb\042" +
    "\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb" +
    "\060\ufffb\001\002\000\050\004\uffcc\005\004\006\uffcc\007" +
    "\uffcc\016\014\020\011\026\uffcc\035\013\037\010\040\016" +
    "\041\027\042\024\052\005\053\015\054\006\055\026\056" +
    "\020\057\007\060\017\001\002\000\056\002\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\016\ufffa\020\ufffa\021\ufffa\026" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa" +
    "\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060" +
    "\ufffa\001\002\000\056\002\uffb1\004\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\016\uffb1\020\uffb1\021\uffb1\026\uffb1\035\uffb1\036" +
    "\230\037\uffb1\040\uffb1\041\uffb1\042\uffb1\052\uffb1\053\uffb1" +
    "\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\001\002\000" +
    "\050\004\uffcc\005\004\006\uffcc\007\uffcc\016\014\020\011" +
    "\026\uffcc\035\013\037\010\040\016\041\027\042\024\052" +
    "\005\053\015\054\006\055\026\056\020\057\007\060\017" +
    "\001\002\000\056\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\016\ufff9\020\ufff9\021\ufff9\026\ufff9\035\ufff9\036\ufff9" +
    "\037\ufff9\040\ufff9\041\ufff9\042\ufff9\052\ufff9\053\ufff9\054" +
    "\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\001\002\000\056" +
    "\002\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\016\uffb2\020" +
    "\uffb2\021\uffb2\026\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\042\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056" +
    "\uffb2\057\uffb2\060\uffb2\001\002\000\056\002\ufffe\004\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\016\ufffe\020\ufffe\021\ufffe\026" +
    "\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe" +
    "\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\060" +
    "\ufffe\001\002\000\050\004\uffcc\005\004\006\uffcc\007\uffcc" +
    "\016\014\020\011\026\uffcc\035\013\037\010\040\016\041" +
    "\027\042\024\052\005\053\015\054\006\055\026\056\020" +
    "\057\007\060\017\001\002\000\052\004\uffcc\005\004\006" +
    "\uffcc\007\uffcc\016\014\020\011\021\236\026\uffcc\035\013" +
    "\037\010\040\016\041\027\042\024\052\005\053\015\054" +
    "\006\055\026\056\020\057\007\060\017\001\002\000\056" +
    "\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\016\uffe9\020" +
    "\uffe9\021\uffe9\026\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\041\uffe9\042\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\057\uffe9\060\uffe9\001\002\000\004\016\ufff8\001\002" +
    "\000\004\016\241\001\002\000\054\004\uffcc\005\004\006" +
    "\uffcc\007\uffcc\011\uffcc\013\046\014\uffcc\016\050\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\044\044\045\042\046\043\052" +
    "\051\054\006\055\026\056\020\057\007\060\017\001\002" +
    "\000\012\017\243\033\055\034\057\043\056\001\002\000" +
    "\050\004\ufff7\005\ufff7\006\ufff7\007\ufff7\016\ufff7\020\ufff7" +
    "\026\ufff7\035\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\052" +
    "\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7" +
    "\001\002\000\050\004\uffcc\005\004\006\uffcc\007\uffcc\016" +
    "\014\020\011\026\uffcc\035\013\037\010\040\016\041\027" +
    "\042\024\052\005\053\015\054\006\055\026\056\020\057" +
    "\007\060\017\001\002\000\056\002\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\016\ufff6\020\ufff6\021\ufff6\026\ufff6\035" +
    "\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\052\ufff6" +
    "\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\001" +
    "\002\000\004\015\261\001\002\000\032\004\uffcc\005\004" +
    "\006\uffcc\007\uffcc\016\014\023\uffcc\052\005\054\006\055" +
    "\026\056\020\057\007\060\017\001\002\000\066\004\uffcc" +
    "\005\004\006\uffcc\007\uffcc\011\uffcc\014\uffcc\016\014\017" +
    "\uffcc\020\251\021\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\043\uffcc\052" +
    "\005\054\006\055\026\056\020\057\007\060\017\001\002" +
    "\000\034\004\uffcc\005\004\006\uffcc\007\uffcc\016\014\021" +
    "\uffcc\024\uffcc\052\005\054\006\055\026\056\020\057\007" +
    "\060\017\001\002\000\046\004\034\005\035\006\033\007" +
    "\037\011\uffd3\014\uffd3\017\uffd3\021\uffd3\023\uffd3\024\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\043\uffd3\001\002\000\004\021\254\001\002\000\046" +
    "\004\uffce\005\uffce\006\uffce\007\uffce\011\uffce\014\uffce\017" +
    "\uffce\021\uffce\023\uffce\024\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\032\uffce\033\uffce\034\uffce\043\uffce\001\002\000" +
    "\014\004\034\005\035\006\033\007\037\023\256\001\002" +
    "\000\050\004\uffda\005\uffda\006\uffda\007\uffda\011\uffda\012" +
    "\257\014\uffda\017\uffda\021\uffda\023\uffda\024\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\043" +
    "\uffda\001\002\000\064\004\uffcc\005\004\006\uffcc\007\uffcc" +
    "\011\uffcc\014\uffcc\016\014\017\uffcc\021\uffcc\023\uffcc\024" +
    "\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\043\uffcc\052\005\054\006\055\026\056\020\057" +
    "\007\060\017\001\002\000\046\004\034\005\035\006\033" +
    "\007\037\011\uffd0\014\uffd0\017\uffd0\021\uffd0\023\uffd0\024" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\043\uffd0\001\002\000\046\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\011\uffcd\014\uffcd\017\uffcd\021\uffcd\023\uffcd" +
    "\024\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\043\uffcd\001\002\000\046\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\011\uffd5\014\uffd5\017\uffd5\021\uffd5\023" +
    "\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\043\uffd5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\014\002\020\003\021\004\024\005\022\011" +
    "\011\001\001\000\004\011\261\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\236\001" +
    "\001\000\004\031\233\001\001\000\002\001\001\000\004" +
    "\013\220\001\001\000\004\011\217\001\001\000\004\032" +
    "\176\001\001\000\004\013\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\164\004\024\005\022\011" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\027\001\001\000\002\001\001\000\004\011\031\001\001" +
    "\000\002\001\001\000\004\011\142\001\001\000\004\011" +
    "\141\001\001\000\004\011\140\001\001\000\004\025\040" +
    "\001\001\000\004\011\037\001\001\000\002\001\001\000" +
    "\006\011\044\012\046\001\001\000\002\001\001\000\004" +
    "\014\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\044\012\117\001\001\000\002\001\001\000\006" +
    "\011\102\012\103\001\001\000\002\001\001\000\006\011" +
    "\052\012\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\063\001\001\000\004\035\061\001\001\000" +
    "\004\034\057\001\001\000\006\011\044\012\060\001\001" +
    "\000\002\001\001\000\006\011\044\012\062\001\001\000" +
    "\002\001\001\000\006\011\044\012\064\001\001\000\002" +
    "\001\001\000\004\011\100\001\001\000\004\011\077\001" +
    "\001\000\004\011\076\001\001\000\004\011\075\001\001" +
    "\000\004\011\074\001\001\000\004\011\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\107\001\001\000\002\001" +
    "\001\000\004\026\111\001\001\000\004\011\112\001\001" +
    "\000\004\027\113\001\001\000\002\001\001\000\004\030" +
    "\115\001\001\000\012\003\116\004\024\005\022\011\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\123\001\001\000\002" +
    "\001\001\000\006\011\044\012\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\132\001\001\000\004\016\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\044\012\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\146\012\147\001\001\000\006\010\154\011" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\157" +
    "\011\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\166\001\001\000\012\003\167\004" +
    "\024\005\022\011\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\044\012\172\001\001\000\002\001" +
    "\001\000\004\024\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\177\007\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\203" +
    "\007\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\214\011\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\044\012\222\001\001\000\002\001\001" +
    "\000\004\017\224\001\001\000\012\003\225\004\024\005" +
    "\022\011\011\001\001\000\004\020\226\001\001\000\004" +
    "\015\230\001\001\000\012\003\231\004\024\005\022\011" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\234\003\021\004\024\005\022\011" +
    "\011\001\001\000\012\003\164\004\024\005\022\011\011" +
    "\001\001\000\002\001\001\000\004\021\237\001\001\000" +
    "\002\001\001\000\006\011\044\012\241\001\001\000\002" +
    "\001\001\000\004\022\243\001\001\000\012\003\244\004" +
    "\024\005\022\011\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\254\001\001\000\004\011\251\001" +
    "\001\000\006\010\252\011\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




 public void syntax_error(Symbol cur_token){
	}

 public void unrecovered_syntax_error(Symbol cur_token){
        System.err.println("Syntax error en linea" + PLXC.lex.getLine() + ", columna " + PLXC.lex.getColumna() + " con el token "+ sym.terminalNames[cur_token.sym]);
        // report_error("Syntax error", null);
        done_parsing();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    private int nVar = 0;

    public void MatrizComprobar(String s,String t){
      ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());
      PLXC.out.println("if ("+s+" < 0) goto "+e.sf+";");
      PLXC.out.println("if ("+t+" < "+ s+") goto "+e.sf+";");
      PLXC.out.println("if ("+t+" == "+ s+") goto "+e.sf+";");
      PLXC.out.println("goto "+e.sv+";");
      PLXC.out.println(e.sf+":");
      tablaS.Error();
      PLXC.out.println(e.sv+":");

    }

    public void ImprimirC(String sv, String sf){
      String L2 = TablaSimbolos.newEtiq();
      PLXC.out.println(sv+":");
      PLXC.out.println("writec 116;");
      PLXC.out.println("writec 114;");
      PLXC.out.println("writec 117;");
      PLXC.out.println("writec 101;");
      PLXC.out.println("writec 10;");
      PLXC.out.println("goto "+L2+";");
      PLXC.out.println(sf+":");
      PLXC.out.println("writec 102;");
      PLXC.out.println("writec 97;");
      PLXC.out.println("writec 108;");
      PLXC.out.println("writec 115;");
      PLXC.out.println("writec 101;");
      PLXC.out.println("writec 10;");
      PLXC.out.println(L2+":");
    }
    public ArrayList<Objeto> reversa(ArrayList<Objeto> m){
      ArrayList<Objeto> res = new ArrayList<Objeto>();
      for(int i = m.size()-1;i>=0;i--){
         res.add(m.get(i));
      }
      return res;
    }
    public String tipoD;
    public Tipo getTipo(boolean matriz){
      Tipo res = null;
      switch(tipoD){
         case "int":
            if(matriz){
               res = TMInt.getInstancia();
            }else{
               res = TInt.getInstancia();
            }
            break;
         case "float":
            if(matriz){
               res = TMFloat.getInstancia();
            }else{
               res = TFloat.getInstancia();
            }
            break;
         case "char":
            if(matriz){
               res = TMChar.getInstancia();
            }else{
               res = TChar.getInstancia();
            }
            break;
         case "string":
               res = TString.getInstancia();
               break;
         case "boolean":
               res = TBool.getInstancia();
               break;
         default:
            tablaS.Error();
            break;
      }
      return res;
    }

    public TablaSimbolos tablaS = new TablaSimbolos();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Lista_de_sent ::= Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Lista_de_sent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_de_sent ::= Lista_de_sent Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Sentencia ::= Expresion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Sentencia ::= Declaracion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Sentencia ::= Asignacion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 PLXC.out.println("goto "+e+";");PLXC.out.println(c.sf +":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Sentencia ::= IF etiq_salto AP Condicion CP NT$0 Sentencia NT$1 else_If 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 PLXC.out.println(e+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.out.println(e+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sentencia ::= WHILE etiq_salto NT$2 AP Condicion CP NT$3 Sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 PLXC.out.println("goto "+e+";");PLXC.out.println(c.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$4 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.out.println(e+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c.sv+":");PLXC.out.println("goto "+e+";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Sentencia ::= DO etiq_salto NT$4 Sentencia WHILE AP Condicion CP NT$5 PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 PLXC.out.println(c.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$6 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(e.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(e.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.out.println("goto "+e.sv+" ;"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 PLXC.out.println(c.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= FOR etiq_bucle AP Expresion PYC NT$6 Condicion PYC NT$7 Expresion NT$8 CP NT$9 Sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 PLXC.out.println("goto "+e.sf+";");PLXC.out.println(c.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Sentencia ::= PRINT AP Condicion CP PYC 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ImprimirC(c.sv,c.sf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sentencia ::= PRINT AP Expresion CP PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Vector<Objeto> p = new Vector<Objeto>();e.metodos("print",p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Sentencia ::= PRINT AP ALL Matriz_aux CLL CP 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Objeto> m = (ArrayList<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 m = reversa(m);for(Objeto o:m){Vector<Objeto> p = new Vector<Objeto>();o.metodos("print",p);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$10 ::= 
            {
              Object RESULT =null;
  tablaS.newBloque(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Sentencia ::= ALL NT$10 Lista_de_sent CLL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 tablaS.borrarBloque(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$11 ::= 
            {
              ArrayList<String> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tipoD = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Declaracion ::= TIPO NT$11 Lista 
            {
              ArrayList<String> RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (ArrayList<String>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 tipoD = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Lista ::= Lista_aux COMA Lista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Lista ::= Lista_aux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Lista_aux ::= IDENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                              if(!tablaS.contiene(i)){
                                                                  Instancia o = new Instancia(i,getTipo(false),tablaS.bActual,true);
                                                                  tablaS.addObj(o);
                                                               }else{ 
                                                                  tablaS.Error();
                                                               }
                                                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_aux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Lista_aux ::= IDENT ASIGNA Expresion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                                                             if(!tablaS.contiene(i)){
                                                                  Instancia o = new Instancia(i,getTipo(false),tablaS.bActual,true);
                                                                  tablaS.addObj(o);
                                                               }else{ 
                                                                  tablaS.Error();
                                                               }
                                                             Objeto o = tablaS.objeto(i);
                                                             if (!(o instanceof Instancia)) {
                                                                tablaS.Error();
                                                             }
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             p.add(e);
                                                             o.metodos("asigna", p);
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_aux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Lista_aux ::= IDENT AC ENTERO CC 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                              if(!tablaS.contiene(i)){
                                                                  Instancia o = new Instancia(i,getTipo(true),tablaS.bActual,true);
                                                                  tablaS.addObj(o);
                                                                  tablaS.addTam(o,Integer.parseInt(e));
                                                                  PLXC.out.println(i+"_length = "+e+";");

                                                               }else{ 
                                                                  tablaS.Error();
                                                               }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_aux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Lista_aux ::= IDENT AC ENTERO CC ASIGNA ALL Matriz_aux CLL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Objeto> m = (ArrayList<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                              if(!tablaS.contiene(i)){
                                                                  Instancia o = new Instancia(i,getTipo(true),tablaS.bActual,true);
                                                                  tablaS.addObj(o);
                                                                  tablaS.addTam(o,Integer.parseInt(e));
                                                                  PLXC.out.println(i+"_length = "+e+";");
                                                                  m = reversa(m);
                                                                  int pos = 0;
                                                                  for(Objeto v: m){
                                                                     Vector<Objeto> p = new Vector<Objeto>();
                                                                     p.add(v);
                                                                     Instancia tam = new Instancia(String.valueOf(pos),TInt.getInstancia(),0,false);
                                                                     p.add(tam);
                                                                     o.metodos("asignaInd", p);
                                                                     pos++;
                                                                  }
                                                               }else{ 
                                                                  tablaS.Error();
                                                               }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_aux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Lista_aux ::= IDENT AC IDENT CC 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 tablaS.Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_aux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expresion ::= ENTERO 
            {
              Objeto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Instancia o = new Instancia(e,TInt.getInstancia(),tablaS.bActual,false);RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expresion ::= FLOAT 
            {
              Objeto RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Instancia o = new Instancia(f,TFloat.getInstancia(),tablaS.bActual,false);RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expresion ::= CHAR 
            {
              Objeto RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Instancia o = new Instancia(c,TChar.getInstancia(),tablaS.bActual,false);RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expresion ::= STRING 
            {
              Objeto RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Instancia o = new Instancia(s,TString.getInstancia(),tablaS.bActual,false);RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expresion ::= IDENT 
            {
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tablaS.objeto(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expresion ::= IDENT AC Expresion CC 
            {
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Objeto obj = tablaS.objeto(i); Vector<Objeto> p = new Vector<Objeto>();Instancia o = new Instancia(e.getNombre(),TInt.getInstancia(),tablaS.bActual,false);p.add(o); RESULT = obj.metodos("obtener",p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expresion ::= Expresion MAS Expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             if(((Instancia) e1).getTipo() == TFloat.getInstancia()){
                                                                p.add(e2);
                                                                RESULT = e1.metodos("suma", p);
                                                             }else if(((Instancia) e2).getTipo() == TFloat.getInstancia()){
                                                                p.add(e1);
                                                                RESULT = e2.metodos("suma", p);
                                                             }else if(((Instancia) e1).getTipo() == TInt.getInstancia()){
                                                                p.add(e2);
                                                                RESULT = e1.metodos("suma",p);
                                                             }else if(((Instancia) e2).getTipo() == TInt.getInstancia()){
                                                                p.add(e1);
                                                                RESULT = e2.metodos("suma",p);
                                                             }else{
                                                                p.add(e2);
                                                                RESULT = e1.metodos("suma", p);
                                                             }
                                                             
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expresion ::= Expresion MENOS Expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             if(((Instancia) e1).getTipo() == TFloat.getInstancia()){
                                                                p.add(e2);
                                                                RESULT = e1.metodos("resta", p);
                                                             }else if(((Instancia) e2).getTipo() == TFloat.getInstancia()){
                                                                p.add(e1);
                                                                RESULT = e2.metodos("resta", p);
                                                             }else{
                                                                p.add(e2);
                                                                RESULT = e1.metodos("resta", p);
                                                             }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expresion ::= Expresion MULT Expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             if(((Instancia) e1).getTipo() == TFloat.getInstancia()){
                                                                p.add(e2);
                                                                RESULT = e1.metodos("multiplicar", p);
                                                             }else if(((Instancia) e2).getTipo() == TFloat.getInstancia()){
                                                                p.add(e1);
                                                                RESULT = e2.metodos("multiplicar", p);
                                                             }else{
                                                                p.add(e2);
                                                                RESULT = e1.metodos("multiplicar", p);
                                                             }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresion ::= Expresion DIVID Expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             if(((Instancia) e1).getTipo() == TFloat.getInstancia()){
                                                                p.add(e2);
                                                                RESULT = e1.metodos("dividir", p);
                                                             }else if(((Instancia) e2).getTipo() == TFloat.getInstancia()){
                                                                p.add(e1);
                                                                RESULT = e2.metodos("dividir", p);
                                                             }else{
                                                                p.add(e2);
                                                                RESULT = e1.metodos("dividir", p);
                                                             }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expresion ::= MENOS Expresion 
            {
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             RESULT = e1.metodos("menosUnario",p);
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion ::= AP Expresion CP 
            {
              Objeto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= IDENT ASIGNA Expresion 
            {
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                             if (!tablaS.contiene(i)) {
                                                                tablaS.Error();
                                                             }
                                                             Objeto o = tablaS.objeto(i);
                                                             if (!(o instanceof Instancia)) {
                                                                tablaS.Error();
                                                             }
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             p.add(e);
                                                             RESULT = o.metodos("asigna", p);
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresion ::= IDENT_BOOL ASIGNA Expresion 
            {
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                               if (!tablaS.contiene(i)) {
                                                                tablaS.Error();
                                                             }
                                                             Objeto o = tablaS.objeto(i);
                                                             if (!(o instanceof Instancia)) {
                                                                tablaS.Error();
                                                             }
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             p.add(e);
                                                             o.metodos("asignaExp", p);
                                                             RESULT = o;
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion ::= IDENT_BOOL ASIGNA Condicion 
            {
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                               if (!tablaS.contiene(i)) {
                                                                tablaS.Error();
                                                             }
                                                             Objeto o = tablaS.objeto(i);
                                                             if (!(o instanceof Instancia)) {
                                                                tablaS.Error();
                                                             }
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             o.setCond(c.sv,c.sf);
                                                             o.metodos("asigna", p);
                                                             RESULT = o;
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expresion ::= IDENT AC Expresion CC ASIGNA Expresion 
            {
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                             

                                                             
                                                             if (!tablaS.contiene(i)) {
                                                                tablaS.Error();
                                                             }
                                                             Objeto o = tablaS.objeto(i);
                                                             if (!(o instanceof Instancia)) {
                                                                tablaS.Error();
                                                             }
                                                             MatrizComprobar(e1.getNombre(),tablaS.getTam(o));
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             if(((Instancia) o).getTipo() == TMFloat.getInstancia() && ((Instancia) e2).getTipo() == TInt.getInstancia()){
                                                               Vector<Objeto> p2 = new Vector<Objeto>();
                                                               p2.add(TFloat.getInstancia());
                                                               e2 = e2.metodos("convertir",p2);
                                                             }
                                                             p.add(e2);
                                                             Instancia tam = new Instancia(e1.getNombre(),TInt.getInstancia(),0,false);
                                                             p.add(tam);
                                                             RESULT = o.metodos("asignaInd", p);
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion ::= AP TIPO CP Expresion 
            {
              Objeto RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                            Vector<Objeto> p = new Vector<Objeto>();
                                                            switch(t){
                                                                case "int":
                                                                    p.add(TInt.getInstancia());
                                                                    break;
                                                                case "float":
                                                                    p.add(TFloat.getInstancia());
                                                                    break;
                                                                case "char":
                                                                    p.add(TChar.getInstancia());
                                                                    break;
                                                                default:
                                                                    TablaSimbolos.Error();
                                                                    break;
                                                            }
                                                            RESULT = e.metodos("convertir", p);
            
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion ::= IDENT ASIGNA ALL Matriz_aux CLL 
            {
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Objeto> m = (ArrayList<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                            if (!tablaS.contiene(i)) {
                                                                tablaS.Error();
                                                             }
                                                             Objeto o = tablaS.objeto(i);
                                                             if (!(o instanceof Instancia)) {
                                                                tablaS.Error();
                                                             }
                                                             if(m.size()>Integer.valueOf(tablaS.getTam(o))){
                                                               tablaS.Error();
                                                             }
                                                             m = reversa(m);
                                                             int pos = 0;
                                                            for(Objeto v: m){
                                                                Vector<Objeto> p = new Vector<Objeto>();
                                                                p.add(v);
                                                                Instancia tam = new Instancia(String.valueOf(pos),TInt.getInstancia(),0,false);
                                                                p.add(tam);
                                                                o.metodos("asignaInd", p);
                                                                pos++;
                                                            }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion ::= IDENT PUNTO LENGTH 
            {
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Instancia(i+"_"+l,TInt.getInstancia(),0,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion ::= 
            {
              Objeto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Matriz_aux ::= Expresion COMA Matriz_aux 
            {
              ArrayList<Objeto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Objeto> m = (ArrayList<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 m.add(e); RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Matriz_aux",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Matriz_aux ::= Expresion 
            {
              ArrayList<Objeto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<Objeto> m = new ArrayList<Objeto>();m.add(e); RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Matriz_aux",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Condicion ::= Expresion IGUAL Expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e1.getNombre()+"=="+e2.getNombre()+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Condicion ::= Expresion DIF Expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e1.getNombre()+"=="+e2.getNombre()+") goto "+e.sf+";");PLXC.out.println("goto "+e.sv+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Condicion ::= Expresion MENOR Expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e1.getNombre()+"<"+e2.getNombre()+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Condicion ::= Expresion MENIG Expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e1.getNombre()+"=="+e2.getNombre()+") goto "+e.sv+";");PLXC.out.println("if("+e1.getNombre()+"<"+e2.getNombre()+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Condicion ::= Expresion MAYOR Expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e2.getNombre()+"<"+e1.getNombre()+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Condicion ::= Expresion MAYIG Expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e1.getNombre()+"=="+e2.getNombre()+") goto "+e.sv+";");PLXC.out.println("if("+e2.getNombre()+"<"+e1.getNombre()+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Condicion ::= NOT Condicion 
            {
              ParEt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt p = new ParEt(c.sf,c.sv);RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$12 ::= 
            {
              ParEt RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c1.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Condicion ::= Condicion AND NT$12 Condicion 
            {
              ParEt RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (ParEt) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c2 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt p = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println(c2.sv+":"); PLXC.out.println("goto "+p.sv+";");PLXC.out.println(c1.sf+":");PLXC.out.println(c2.sf+":");PLXC.out.println("goto "+p.sf+";");RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$13 ::= 
            {
              ParEt RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c1.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Condicion ::= Condicion OR NT$13 Condicion 
            {
              ParEt RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (ParEt) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c2 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt p = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println(c2.sf+":"); PLXC.out.println("goto "+p.sf+";");PLXC.out.println(c1.sv+":");PLXC.out.println(c2.sv+":");PLXC.out.println("goto "+p.sv+";");RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$14 ::= 
            {
              ParEt RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c1.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Condicion ::= Condicion IMPLICA NT$14 Condicion 
            {
              ParEt RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (ParEt) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c2 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt p = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println(c2.sf+":"); PLXC.out.println("goto "+p.sf+";");PLXC.out.println(c1.sf+":");PLXC.out.println(c2.sv+":");PLXC.out.println("goto "+p.sv+";");RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Condicion ::= AP Condicion CP 
            {
              ParEt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$15 ::= 
            {
              ParEt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.out.println(i+" = 0;");PLXC.out.println(e.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Condicion ::= FORALL etiq_bucle IDENT_BOOL NT$15 COMA Condicion 
            {
              ParEt RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (ParEt) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 PLXC.out.println(c.sv+":");PLXC.out.println("if (1 == "+i+") goto "+e.sv+";");PLXC.out.println(i+" = 1;");PLXC.out.println("goto "+e.sf+";"); RESULT = new ParEt(e.sv,c.sf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$16 ::= 
            {
              ParEt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.out.println(i+" = "+e1+";");PLXC.out.println(e.sf+":");PLXC.out.println("if ("+e2+"< "+i+") goto "+e.sv+";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Condicion ::= FORALL etiq_bucle IDENT FROM ENTERO TO ENTERO NT$16 Forall_aux COMA Condicion 
            {
              ParEt RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (ParEt) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 PLXC.out.println(c.sv+":");PLXC.out.println(i+" = "+i+" + "+f+";");PLXC.out.println("goto "+e.sf+";"); RESULT = new ParEt(e.sv,c.sf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Condicion ::= IDENT_BOOL 
            {
              ParEt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Instancia o = (Instancia) tablaS.objeto(i); if(o.getTipo() == TBool.getInstancia()){ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if(1 == "+o.getNombre()+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; }else{tablaS.Error();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Condicion ::= TRUE 
            {
              ParEt RESULT =null;
		
                      ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());
                      PLXC.out.println("goto "+e.sv+";");
                      RESULT = e;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Condicion ::= FALSE 
            {
              ParEt RESULT =null;
		
                      ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());
                      PLXC.out.println("goto "+e.sf+";");
                      RESULT = e;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Forall_aux ::= STEP ENTERO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Forall_aux",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Forall_aux ::= 
            {
              String RESULT =null;
		 RESULT = "1"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Forall_aux",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // else_If ::= ELSE Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_If",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // else_If ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_If",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // etiq_salto ::= 
            {
              String RESULT =null;
		 RESULT = tablaS.newEtiq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiq_salto",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // etiq_bucle ::= 
            {
              ParEt RESULT =null;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiq_bucle",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

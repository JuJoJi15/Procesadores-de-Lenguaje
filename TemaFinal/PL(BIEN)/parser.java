
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.IOException;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\011\002\000\002\012\002" +
    "\000\002\003\013\000\002\013\002\000\002\014\002\000" +
    "\002\003\012\000\002\015\002\000\002\016\002\000\002" +
    "\003\014\000\002\017\002\000\002\020\002\000\002\021" +
    "\002\000\002\022\002\000\002\003\020\000\002\003\007" +
    "\000\002\003\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\004\000\002" +
    "\004\005\000\002\004\005\000\002\004\003\000\002\004" +
    "\003\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\004\000\002\023\002\000\002\005\006\000\002" +
    "\024\002\000\002\005\006\000\002\005\005\000\002\010" +
    "\004\000\002\010\002\000\002\006\002\000\002\007\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\026\005\007\015\020\017\011\030\013\032" +
    "\004\033\017\034\006\035\015\036\005\037\010\001\002" +
    "\000\004\015\uffd6\001\002\000\040\004\uffe6\005\uffe6\006" +
    "\uffe6\007\uffe6\011\uffe6\012\136\014\uffe6\016\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\001" +
    "\002\000\004\015\uffd5\001\002\000\012\005\007\015\020" +
    "\036\005\037\010\001\002\000\036\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\011\uffe5\014\uffe5\016\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\001\002\000" +
    "\026\005\007\015\020\017\011\030\013\032\004\033\017" +
    "\034\006\035\015\036\005\037\010\001\002\000\032\002" +
    "\001\005\001\015\001\017\001\020\001\030\001\032\001" +
    "\033\001\034\001\035\001\036\001\037\001\001\002\000" +
    "\004\015\uffd6\001\002\000\030\002\103\005\007\015\020" +
    "\017\011\030\013\032\004\033\017\034\006\035\015\036" +
    "\005\037\010\001\002\000\004\015\076\001\002\000\014" +
    "\004\023\005\024\006\022\007\026\021\075\001\002\000" +
    "\026\005\uffd6\015\uffd6\017\uffd6\030\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\001\002\000\012\005" +
    "\007\015\020\036\005\037\010\001\002\000\014\004\023" +
    "\005\024\006\022\007\026\016\025\001\002\000\012\005" +
    "\007\015\020\036\005\037\010\001\002\000\012\005\007" +
    "\015\020\036\005\037\010\001\002\000\012\005\007\015" +
    "\020\036\005\037\010\001\002\000\036\004\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\011\uffe8\014\uffe8\016\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\001\002" +
    "\000\012\005\007\015\020\036\005\037\010\001\002\000" +
    "\036\004\uffea\005\uffea\006\uffea\007\uffea\011\uffea\014\uffea" +
    "\016\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\001\002\000\036\004\uffec\005\uffec\006\022" +
    "\007\026\011\uffec\014\uffec\016\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\001\002\000\036" +
    "\004\uffed\005\uffed\006\022\007\026\011\uffed\014\uffed\016" +
    "\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed" +
    "\027\uffed\001\002\000\036\004\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\011\uffeb\014\uffeb\016\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\024\uffeb\025\uffeb\026\uffeb\027\uffeb\001\002\000\026\005" +
    "\ufff7\015\ufff7\017\ufff7\030\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\036\ufff7\037\ufff7\001\002\000\026\005\007\015" +
    "\020\017\011\030\013\032\004\033\017\034\006\035\015" +
    "\036\005\037\010\001\002\000\004\032\036\001\002\000" +
    "\004\015\037\001\002\000\014\005\007\013\042\015\040" +
    "\036\005\037\010\001\002\000\014\005\007\013\042\015" +
    "\040\036\005\037\010\001\002\000\010\016\067\026\061" +
    "\027\062\001\002\000\014\005\007\013\042\015\040\036" +
    "\005\037\010\001\002\000\026\004\023\005\024\006\022" +
    "\007\026\011\050\014\046\022\047\023\045\024\044\025" +
    "\051\001\002\000\012\005\007\015\020\036\005\037\010" +
    "\001\002\000\012\005\007\015\020\036\005\037\010\001" +
    "\002\000\012\005\007\015\020\036\005\037\010\001\002" +
    "\000\012\005\007\015\020\036\005\037\010\001\002\000" +
    "\012\005\007\015\020\036\005\037\010\001\002\000\012" +
    "\005\007\015\020\036\005\037\010\001\002\000\022\004" +
    "\023\005\024\006\022\007\026\016\uffe1\021\uffe1\026\uffe1" +
    "\027\uffe1\001\002\000\022\004\023\005\024\006\022\007" +
    "\026\016\uffe4\021\uffe4\026\uffe4\027\uffe4\001\002\000\022" +
    "\004\023\005\024\006\022\007\026\016\uffe0\021\uffe0\026" +
    "\uffe0\027\uffe0\001\002\000\022\004\023\005\024\006\022" +
    "\007\026\016\uffe3\021\uffe3\026\uffe3\027\uffe3\001\002\000" +
    "\022\004\023\005\024\006\022\007\026\016\uffe2\021\uffe2" +
    "\026\uffe2\027\uffe2\001\002\000\022\004\023\005\024\006" +
    "\022\007\026\016\uffdf\021\uffdf\026\uffdf\027\uffdf\001\002" +
    "\000\012\016\uffde\021\uffde\026\uffde\027\uffde\001\002\000" +
    "\014\005\uffdd\013\uffdd\015\uffdd\036\uffdd\037\uffdd\001\002" +
    "\000\014\005\uffdb\013\uffdb\015\uffdb\036\uffdb\037\uffdb\001" +
    "\002\000\014\005\007\013\042\015\040\036\005\037\010" +
    "\001\002\000\012\016\uffda\021\uffda\026\uffda\027\uffda\001" +
    "\002\000\014\005\007\013\042\015\040\036\005\037\010" +
    "\001\002\000\012\016\uffdc\021\uffdc\026\uffdc\027\uffdc\001" +
    "\002\000\004\021\ufff6\001\002\000\004\021\071\001\002" +
    "\000\034\002\ufff5\005\ufff5\015\ufff5\017\ufff5\020\ufff5\030" +
    "\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5" +
    "\037\ufff5\001\002\000\010\016\074\026\061\027\062\001" +
    "\002\000\030\004\023\005\024\006\022\007\026\011\050" +
    "\014\046\016\025\022\047\023\045\024\044\025\051\001" +
    "\002\000\012\016\uffd9\021\uffd9\026\uffd9\027\uffd9\001\002" +
    "\000\034\002\ufffe\005\ufffe\015\ufffe\017\ufffe\020\ufffe\030" +
    "\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe" +
    "\037\ufffe\001\002\000\012\005\007\015\020\036\005\037" +
    "\010\001\002\000\014\004\023\005\024\006\022\007\026" +
    "\016\100\001\002\000\004\021\101\001\002\000\034\002" +
    "\uffef\005\uffef\015\uffef\017\uffef\020\uffef\030\uffef\031\uffef" +
    "\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\001" +
    "\002\000\032\002\uffff\005\uffff\015\uffff\017\uffff\020\uffff" +
    "\030\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037" +
    "\uffff\001\002\000\004\002\000\001\002\000\004\015\105" +
    "\001\002\000\014\005\007\013\042\015\040\036\005\037" +
    "\010\001\002\000\010\016\107\026\061\027\062\001\002" +
    "\000\026\005\ufffd\015\ufffd\017\ufffd\030\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\001\002\000\026" +
    "\005\007\015\020\017\011\030\013\032\004\033\017\034" +
    "\006\035\015\036\005\037\010\001\002\000\034\002\ufffc" +
    "\005\ufffc\015\ufffc\017\ufffc\020\ufffc\030\ufffc\031\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\001\002" +
    "\000\034\002\uffd7\005\uffd7\015\uffd7\017\uffd7\020\uffd7\030" +
    "\uffd7\031\113\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\001\002\000\026\005\007\015\020\017\011\030" +
    "\013\032\004\033\017\034\006\035\015\036\005\037\010" +
    "\001\002\000\034\002\ufffb\005\ufffb\015\ufffb\017\ufffb\020" +
    "\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb" +
    "\036\ufffb\037\ufffb\001\002\000\034\002\uffd8\005\uffd8\015" +
    "\uffd8\017\uffd8\020\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\037\uffd8\001\002\000\030\005" +
    "\007\015\020\017\011\020\117\030\013\032\004\033\017" +
    "\034\006\035\015\036\005\037\010\001\002\000\034\002" +
    "\uffee\005\uffee\015\uffee\017\uffee\020\uffee\030\uffee\031\uffee" +
    "\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\001" +
    "\002\000\036\004\uffe9\005\uffe9\006\uffe9\007\uffe9\011\uffe9" +
    "\014\uffe9\016\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\001\002\000\004\015\122\001\002" +
    "\000\012\005\007\015\020\036\005\037\010\001\002\000" +
    "\014\004\023\005\024\006\022\007\026\021\124\001\002" +
    "\000\014\005\ufff4\013\ufff4\015\ufff4\036\ufff4\037\ufff4\001" +
    "\002\000\014\005\007\013\042\015\040\036\005\037\010" +
    "\001\002\000\010\021\127\026\061\027\062\001\002\000" +
    "\012\005\ufff3\015\ufff3\036\ufff3\037\ufff3\001\002\000\012" +
    "\005\007\015\020\036\005\037\010\001\002\000\014\004" +
    "\023\005\024\006\022\007\026\016\ufff2\001\002\000\004" +
    "\016\133\001\002\000\026\005\ufff1\015\ufff1\017\ufff1\030" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\001\002\000\026\005\007\015\020\017\011\030\013\032" +
    "\004\033\017\034\006\035\015\036\005\037\010\001\002" +
    "\000\034\002\ufff0\005\ufff0\015\ufff0\017\ufff0\020\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\001\002\000\012\005\007\015\020\036\005\037" +
    "\010\001\002\000\036\004\023\005\024\006\022\007\026" +
    "\011\uffe7\014\uffe7\016\uffe7\021\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\001\002\000\004\015\ufffa" +
    "\001\002\000\004\015\142\001\002\000\014\005\007\013" +
    "\042\015\040\036\005\037\010\001\002\000\010\016\144" +
    "\026\061\027\062\001\002\000\026\005\ufff9\015\ufff9\017" +
    "\ufff9\030\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9" +
    "\037\ufff9\001\002\000\026\005\007\015\020\017\011\030" +
    "\013\032\004\033\017\034\006\035\015\036\005\037\010" +
    "\001\002\000\034\002\ufff8\005\ufff8\015\ufff8\017\ufff8\020" +
    "\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\036\ufff8\037\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\010\002\013\003\011\004\015\001\001\000" +
    "\004\006\137\001\001\000\002\001\001\000\004\007\120" +
    "\001\001\000\004\004\117\001\001\000\002\001\001\000" +
    "\010\002\115\003\011\004\015\001\001\000\002\001\001" +
    "\000\004\006\103\001\001\000\006\003\101\004\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\032" +
    "\001\001\000\004\004\020\001\001\000\002\001\001\000" +
    "\004\004\031\001\001\000\004\004\030\001\001\000\004" +
    "\004\027\001\001\000\002\001\001\000\004\004\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\033\001\001\000\006\003" +
    "\034\004\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\042\005\040\001\001\000\006\004\072\005" +
    "\071\001\001\000\002\001\001\000\006\004\042\005\057" +
    "\001\001\000\002\001\001\000\004\004\056\001\001\000" +
    "\004\004\055\001\001\000\004\004\054\001\001\000\004" +
    "\004\053\001\001\000\004\004\052\001\001\000\004\004" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\064\001\001\000\004" +
    "\024\062\001\001\000\006\004\042\005\063\001\001\000" +
    "\002\001\001\000\006\004\042\005\065\001\001\000\002" +
    "\001\001\000\004\016\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\042\005\105\001\001\000\002\001\001\000\004\011\107" +
    "\001\001\000\006\003\110\004\015\001\001\000\004\012" +
    "\111\001\001\000\004\010\113\001\001\000\006\003\114" +
    "\004\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\101\004\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\122\001\001\000" +
    "\002\001\001\000\004\017\124\001\001\000\006\004\042" +
    "\005\125\001\001\000\002\001\001\000\004\020\127\001" +
    "\001\000\004\004\130\001\001\000\004\021\131\001\001" +
    "\000\002\001\001\000\004\022\133\001\001\000\006\003" +
    "\134\004\015\001\001\000\002\001\001\000\004\004\136" +
    "\001\001\000\002\001\001\000\004\013\140\001\001\000" +
    "\002\001\001\000\006\004\042\005\142\001\001\000\002" +
    "\001\001\000\004\014\144\001\001\000\006\003\145\004" +
    "\015\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




 public void syntax_error(Symbol cur_token){
	}

 public void unrecovered_syntax_error(Symbol cur_token){
        System.err.println("Syntax error en linea" + PLC.lex.getLine() + ", columna " + PLC.lex.getColumna() + " con el token "+ sym.terminalNames[cur_token.sym]);
        // report_error("Syntax error", null);
        done_parsing();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    private int nEtiq = 0;
    private int nVar = 0;
    class ParEt{public String sv,sf;

      public ParEt(String v,String f){
        sv = v;
        sf = f;
      }

    }

    private String newEtiq(){
        String res = "L"+nEtiq;
        nEtiq++;
        return res;
    }
    private String newVar(){
        String res = "t"+nVar;
        nVar++;
        return res;
    }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Lista_de_sent ::= Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Lista_de_sent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_de_sent ::= Lista_de_sent Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Sentencia ::= Expresion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLC.out.println(c.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 PLC.out.println("goto "+e+";");PLC.out.println(c.sf +":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Sentencia ::= IF etiq_salto AP Condicion CP NT$0 Sentencia NT$1 else_If 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 PLC.out.println(e+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLC.out.println(e+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLC.out.println(c.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Sentencia ::= WHILE etiq_salto NT$2 AP Condicion CP NT$3 Sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 PLC.out.println("goto "+e+";");PLC.out.println(c.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLC.out.println(e+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLC.out.println(c.sv+":");PLC.out.println("goto "+e+";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sentencia ::= DO etiq_salto NT$4 Sentencia WHILE AP Condicion CP NT$5 PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 PLC.out.println(c.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$6 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLC.out.println(e.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLC.out.println(e.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLC.out.println("goto "+e.sv+" ;"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 PLC.out.println(c.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sentencia ::= FOR etiq_bucle AP Expresion PYC NT$6 Condicion PYC NT$7 Expresion NT$8 CP NT$9 Sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 PLC.out.println("goto "+e.sf+";");PLC.out.println(c.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencia ::= PRINT AP Expresion CP PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 PLC.out.println("print "+e+" ;"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= ALL Lista_de_sent CLL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expresion ::= Expresion MAS Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String v = newVar(); PLC.out.println(v+" = "+e1+" + "+e2+";");RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expresion ::= Expresion MENOS Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String v = newVar(); PLC.out.println(v+" = "+e1+" - "+e2+";");RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expresion ::= Expresion MULT Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String v = newVar(); PLC.out.println(v+" = "+e1+" * "+e2+";");RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expresion ::= Expresion DIVID Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String v = newVar(); PLC.out.println(v+" = "+e1+" / "+e2+";");RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expresion ::= MENOS Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String v = newVar(); PLC.out.println(v+" = 0 - "+e1+";");RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expresion ::= AP Expresion CP 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expresion ::= IDENT ASIGNA Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 PLC.out.println(i+" = "+e+";");RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expresion ::= IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expresion ::= ENTERO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Condicion ::= Expresion IGUAL Expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(newEtiq(),newEtiq());PLC.out.println("if("+e1+"=="+e2+") goto "+e.sv+";");PLC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Condicion ::= Expresion DIF Expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(newEtiq(),newEtiq());PLC.out.println("if("+e1+"=="+e2+") goto "+e.sf+";");PLC.out.println("goto "+e.sv+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Condicion ::= Expresion MENOR Expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(newEtiq(),newEtiq());PLC.out.println("if("+e1+"<"+e2+") goto "+e.sv+";");PLC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Condicion ::= Expresion MENIG Expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(newEtiq(),newEtiq());PLC.out.println("if("+e1+"=="+e2+") goto "+e.sv+";");PLC.out.println("if("+e1+"<"+e2+") goto "+e.sv+";");PLC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Condicion ::= Expresion MAYOR Expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(newEtiq(),newEtiq());PLC.out.println("if("+e1+">"+e2+") goto "+e.sf+";");PLC.out.println("goto "+e.sv+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Condicion ::= Expresion MAYIG Expresion 
            {
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(newEtiq(),newEtiq());PLC.out.println("if("+e1+"=="+e2+") goto "+e.sv+";");PLC.out.println("if("+e1+"<"+e2+") goto "+e.sv+";");PLC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Condicion ::= EXC Condicion 
            {
              ParEt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt p = new ParEt(c.sf,c.sv);RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$10 ::= 
            {
              ParEt RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLC.out.println(c1.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Condicion ::= Condicion AND NT$10 Condicion 
            {
              ParEt RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (ParEt) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c2 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt p = new ParEt(newEtiq(),newEtiq());PLC.out.println(c2.sv+":"); PLC.out.println("goto "+p.sv+";");PLC.out.println(c1.sf+":");PLC.out.println(c2.sf+":");PLC.out.println("goto "+p.sf+";");RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$11 ::= 
            {
              ParEt RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLC.out.println(c1.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Condicion ::= Condicion OR NT$11 Condicion 
            {
              ParEt RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (ParEt) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c2 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt p = new ParEt(newEtiq(),newEtiq());PLC.out.println(c2.sf+":"); PLC.out.println("goto "+p.sf+";");PLC.out.println(c1.sv+":");PLC.out.println(c2.sv+":");PLC.out.println("goto "+p.sv+";");RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Condicion ::= AP Condicion CP 
            {
              ParEt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // else_If ::= ELSE Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_If",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // else_If ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_If",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // etiq_salto ::= 
            {
              String RESULT =null;
		 RESULT = newEtiq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiq_salto",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // etiq_bucle ::= 
            {
              ParEt RESULT =null;
		 ParEt e = new ParEt(newEtiq(),newEtiq());RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiq_bucle",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

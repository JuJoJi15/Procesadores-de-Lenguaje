
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java.io.IOException;
import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\020\002\000\002\021\002\000\002\003\013\000" +
    "\002\022\002\000\002\023\002\000\002\003\012\000\002" +
    "\024\002\000\002\025\002\000\002\003\014\000\002\026" +
    "\002\000\002\027\002\000\002\030\002\000\002\031\002" +
    "\000\002\003\020\000\002\003\007\000\002\003\010\000" +
    "\002\032\002\000\002\003\006\000\002\033\002\000\002" +
    "\005\005\000\002\034\002\000\002\005\006\000\002\016" +
    "\005\000\002\016\003\000\002\017\003\000\002\017\007" +
    "\000\002\017\005\000\002\006\005\000\002\006\003\000" +
    "\002\007\003\000\002\007\005\000\002\007\006\000\002" +
    "\007\012\000\002\007\006\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\006\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\004\000\002" +
    "\011\005\000\002\011\005\000\002\011\010\000\002\011" +
    "\006\000\002\011\007\000\002\011\005\000\002\011\005" +
    "\000\002\011\003\000\002\011\002\000\002\010\005\000" +
    "\002\010\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\004\000\002\035\002\000\002\012\006" +
    "\000\002\036\002\000\002\012\006\000\002\012\005\000" +
    "\002\012\005\000\002\015\004\000\002\015\002\000\002" +
    "\013\002\000\002\014\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\050\004\030\005\004\006\uffc6\007\uffc6\020" +
    "\013\022\010\030\uffc6\037\012\041\007\042\015\043\027" +
    "\044\024\045\014\046\005\047\026\050\017\051\006\052" +
    "\016\053\021\001\002\000\062\004\030\005\004\006\uffc6" +
    "\007\uffc6\011\uffc6\014\uffc6\017\uffc6\020\013\021\uffc6\023" +
    "\uffc6\025\uffc6\026\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\046\005\047\026\050\017\051" +
    "\006\052\016\001\002\000\054\004\uffd5\005\uffd5\006\uffd5" +
    "\007\uffd5\011\uffd5\012\232\014\uffd5\017\uffd5\021\uffd5\023" +
    "\uffd5\024\231\025\uffd5\026\uffd5\027\230\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\001\002\000" +
    "\046\004\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7\014\uffd7" +
    "\017\uffd7\021\uffd7\023\uffd7\025\uffd7\026\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\001\002" +
    "\000\004\020\uffb4\001\002\000\050\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\020\uffeb\022\uffeb\030\uffeb\037\uffeb\041\uffeb" +
    "\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\053\uffeb\001\002\000\014\004\035" +
    "\005\036\006\034\007\040\030\215\001\002\000\004\020" +
    "\uffb4\001\002\000\032\004\030\005\004\006\uffc6\007\uffc6" +
    "\020\013\021\uffc6\045\047\046\005\047\026\050\017\051" +
    "\006\052\016\001\002\000\004\046\uffe9\001\002\000\050" +
    "\004\uffb4\005\uffb4\006\uffb4\007\uffb4\020\uffb4\022\uffb4\030" +
    "\uffb4\037\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\001" +
    "\002\000\046\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6" +
    "\014\uffd6\017\uffd6\021\uffd6\023\uffd6\025\uffd6\026\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\001\002\000\046\004\uffd8\005\uffd8\006\uffd8\007\uffd8\011" +
    "\uffd8\014\uffd8\017\uffd8\021\uffd8\023\uffd8\025\uffd8\026\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\001\002\000\052\002\146\004\030\005\004\006\uffc6" +
    "\007\uffc6\020\013\022\010\030\uffc6\037\012\041\007\042" +
    "\015\043\027\044\024\045\014\046\005\047\026\050\017" +
    "\051\006\052\016\053\021\001\002\000\004\045\132\001" +
    "\002\000\054\002\001\004\001\005\001\006\001\007\001" +
    "\020\001\022\001\023\001\030\001\037\001\041\001\042" +
    "\001\043\001\044\001\045\001\046\001\047\001\050\001" +
    "\051\001\052\001\053\001\001\002\000\004\030\131\001" +
    "\002\000\004\020\116\001\002\000\004\030\115\001\002" +
    "\000\046\004\uffd9\005\uffd9\006\uffd9\007\uffd9\011\uffd9\014" +
    "\uffd9\017\uffd9\021\uffd9\023\uffd9\025\uffd9\026\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\001" +
    "\002\000\004\020\uffb3\001\002\000\046\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\011\uffc7\014\uffc7\017\uffc7\021\uffc7\023" +
    "\uffc7\025\uffc7\026\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\036\uffc7\001\002\000\004\020\032\001" +
    "\002\000\030\004\030\005\004\006\uffc6\007\uffc6\020\013" +
    "\030\uffc6\046\005\047\026\050\017\051\006\052\016\001" +
    "\002\000\014\004\035\005\036\006\034\007\040\030\037" +
    "\001\002\000\062\004\030\005\004\006\uffc6\007\uffc6\011" +
    "\uffc6\014\uffc6\017\uffc6\020\013\021\uffc6\023\uffc6\025\uffc6" +
    "\026\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\046\005\047\026\050\017\051\006\052\016" +
    "\001\002\000\062\004\030\005\004\006\uffc6\007\uffc6\011" +
    "\uffc6\014\uffc6\017\uffc6\020\013\021\uffc6\023\uffc6\025\uffc6" +
    "\026\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\046\005\047\026\050\017\051\006\052\016" +
    "\001\002\000\062\004\030\005\004\006\uffc6\007\uffc6\011" +
    "\uffc6\014\uffc6\017\uffc6\020\013\021\uffc6\023\uffc6\025\uffc6" +
    "\026\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\046\005\047\026\050\017\051\006\052\016" +
    "\001\002\000\046\004\ufff2\005\ufff2\006\ufff2\007\ufff2\011" +
    "\ufff2\013\ufff2\014\ufff2\017\ufff2\020\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052" +
    "\ufff2\001\002\000\062\004\030\005\004\006\uffc6\007\uffc6" +
    "\011\uffc6\014\uffc6\017\uffc6\020\013\021\uffc6\023\uffc6\025" +
    "\uffc6\026\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\046\005\047\026\050\017\051\006\052" +
    "\016\001\002\000\046\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\011\uffd0\014\uffd0\017\uffd0\021\uffd0\023\uffd0\025\uffd0\026" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\001\002\000\046\004\030\005\004\006\uffc6\007" +
    "\uffc6\011\uffc6\013\044\014\uffc6\017\uffc6\020\046\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\046\005\047\026\050\017\051" +
    "\006\052\016\001\002\000\030\004\035\005\036\006\034" +
    "\007\040\011\067\014\065\017\064\031\066\032\061\033" +
    "\063\034\070\001\002\000\046\004\030\005\004\006\uffc6" +
    "\007\uffc6\011\uffc6\013\044\014\uffc6\017\uffc6\020\046\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\046\005\047\026\050\017" +
    "\051\006\052\016\001\002\000\010\030\102\035\052\036" +
    "\053\001\002\000\052\004\030\005\004\006\uffc6\007\uffc6" +
    "\011\uffc6\013\044\014\uffc6\017\uffc6\020\046\021\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\045\047\046\005\047\026" +
    "\050\017\051\006\052\016\001\002\000\004\021\100\001" +
    "\002\000\032\004\035\005\036\006\034\007\040\011\067" +
    "\014\065\017\064\021\062\031\066\032\061\033\063\034" +
    "\070\001\002\000\010\021\054\035\052\036\053\001\002" +
    "\000\046\004\uffbc\005\uffbc\006\uffbc\007\uffbc\011\uffbc\013" +
    "\uffbc\014\uffbc\017\uffbc\020\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\001" +
    "\002\000\046\004\uffba\005\uffba\006\uffba\007\uffba\011\uffba" +
    "\013\uffba\014\uffba\017\uffba\020\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba" +
    "\001\002\000\012\021\uffb8\030\uffb8\035\uffb8\036\uffb8\001" +
    "\002\000\046\004\030\005\004\006\uffc6\007\uffc6\011\uffc6" +
    "\013\044\014\uffc6\017\uffc6\020\046\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\046\005\047\026\050\017\051\006\052\016" +
    "\001\002\000\012\021\uffb9\030\uffb9\035\052\036\uffb9\001" +
    "\002\000\046\004\030\005\004\006\uffc6\007\uffc6\011\uffc6" +
    "\013\044\014\uffc6\017\uffc6\020\046\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\046\005\047\026\050\017\051\006\052\016" +
    "\001\002\000\012\021\uffbb\030\uffbb\035\uffbb\036\uffbb\001" +
    "\002\000\036\004\030\005\004\006\uffc6\007\uffc6\020\013" +
    "\021\uffc6\030\uffc6\035\uffc6\036\uffc6\046\005\047\026\050" +
    "\017\051\006\052\016\001\002\000\046\004\uffce\005\uffce" +
    "\006\uffce\007\uffce\011\uffce\014\uffce\017\uffce\021\uffce\023" +
    "\uffce\025\uffce\026\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\001\002\000\036\004\030\005" +
    "\004\006\uffc6\007\uffc6\020\013\021\uffc6\030\uffc6\035\uffc6" +
    "\036\uffc6\046\005\047\026\050\017\051\006\052\016\001" +
    "\002\000\036\004\030\005\004\006\uffc6\007\uffc6\020\013" +
    "\021\uffc6\030\uffc6\035\uffc6\036\uffc6\046\005\047\026\050" +
    "\017\051\006\052\016\001\002\000\036\004\030\005\004" +
    "\006\uffc6\007\uffc6\020\013\021\uffc6\030\uffc6\035\uffc6\036" +
    "\uffc6\046\005\047\026\050\017\051\006\052\016\001\002" +
    "\000\036\004\030\005\004\006\uffc6\007\uffc6\020\013\021" +
    "\uffc6\030\uffc6\035\uffc6\036\uffc6\046\005\047\026\050\017" +
    "\051\006\052\016\001\002\000\036\004\030\005\004\006" +
    "\uffc6\007\uffc6\020\013\021\uffc6\030\uffc6\035\uffc6\036\uffc6" +
    "\046\005\047\026\050\017\051\006\052\016\001\002\000" +
    "\036\004\030\005\004\006\uffc6\007\uffc6\020\013\021\uffc6" +
    "\030\uffc6\035\uffc6\036\uffc6\046\005\047\026\050\017\051" +
    "\006\052\016\001\002\000\022\004\035\005\036\006\034" +
    "\007\040\021\uffc0\030\uffc0\035\uffc0\036\uffc0\001\002\000" +
    "\022\004\035\005\036\006\034\007\040\021\uffc3\030\uffc3" +
    "\035\uffc3\036\uffc3\001\002\000\022\004\035\005\036\006" +
    "\034\007\040\021\uffbf\030\uffbf\035\uffbf\036\uffbf\001\002" +
    "\000\022\004\035\005\036\006\034\007\040\021\uffc2\030" +
    "\uffc2\035\uffc2\036\uffc2\001\002\000\022\004\035\005\036" +
    "\006\034\007\040\021\uffb7\030\uffb7\035\uffb7\036\uffb7\001" +
    "\002\000\022\004\035\005\036\006\034\007\040\021\uffbe" +
    "\030\uffbe\035\uffbe\036\uffbe\001\002\000\022\004\035\005" +
    "\036\006\034\007\040\021\uffc1\030\uffc1\035\uffc1\036\uffc1" +
    "\001\002\000\062\004\030\005\004\006\uffc6\007\uffc6\011" +
    "\uffc6\014\uffc6\017\uffc6\020\013\021\uffc6\023\uffc6\025\uffc6" +
    "\026\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\046\005\047\026\050\017\051\006\052\016" +
    "\001\002\000\046\004\uffcb\005\uffcb\006\uffcb\007\uffcb\011" +
    "\uffcb\014\uffcb\017\uffcb\021\uffcb\023\uffcb\025\uffcb\026\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\001\002\000\030\004\ufff1\005\ufff1\006\ufff1\007\ufff1" +
    "\020\ufff1\021\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052" +
    "\ufff1\001\002\000\030\004\030\005\004\006\uffc6\007\uffc6" +
    "\020\013\021\uffc6\046\005\047\026\050\017\051\006\052" +
    "\016\001\002\000\014\004\035\005\036\006\034\007\040" +
    "\021\ufff0\001\002\000\004\021\106\001\002\000\050\004" +
    "\uffef\005\uffef\006\uffef\007\uffef\020\uffef\022\uffef\030\uffef" +
    "\037\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\001\002" +
    "\000\050\004\030\005\004\006\uffc6\007\uffc6\020\013\022" +
    "\010\030\uffc6\037\012\041\007\042\015\043\027\044\024" +
    "\045\014\046\005\047\026\050\017\051\006\052\016\053" +
    "\021\001\002\000\056\002\uffee\004\uffee\005\uffee\006\uffee" +
    "\007\uffee\020\uffee\022\uffee\023\uffee\030\uffee\037\uffee\040" +
    "\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee" +
    "\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\001\002\000" +
    "\012\021\uffbd\030\uffbd\035\uffbd\036\uffbd\001\002\000\046" +
    "\004\uffd2\005\uffd2\006\034\007\040\011\uffd2\014\uffd2\017" +
    "\uffd2\021\uffd2\023\uffd2\025\uffd2\026\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\001\002\000" +
    "\046\004\uffd3\005\uffd3\006\034\007\040\011\uffd3\014\uffd3" +
    "\017\uffd3\021\uffd3\023\uffd3\025\uffd3\026\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\001\002" +
    "\000\046\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1\014" +
    "\uffd1\017\uffd1\021\uffd1\023\uffd1\025\uffd1\026\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\001" +
    "\002\000\056\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\020\ufffc\022\ufffc\023\ufffc\030\ufffc\037\ufffc\040\ufffc\041" +
    "\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc" +
    "\050\ufffc\051\ufffc\052\ufffc\053\ufffc\001\002\000\032\004" +
    "\030\005\004\006\uffc6\007\uffc6\020\013\021\uffc6\022\117" +
    "\046\005\047\026\050\017\051\006\052\016\001\002\000" +
    "\032\004\030\005\004\006\uffc6\007\uffc6\020\013\023\uffc6" +
    "\026\uffc6\046\005\047\026\050\017\051\006\052\016\001" +
    "\002\000\014\004\035\005\036\006\034\007\040\021\121" +
    "\001\002\000\004\030\122\001\002\000\056\002\uffed\004" +
    "\uffed\005\uffed\006\uffed\007\uffed\020\uffed\022\uffed\023\uffed" +
    "\030\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044" +
    "\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed" +
    "\053\uffed\001\002\000\004\023\127\001\002\000\016\004" +
    "\035\005\036\006\034\007\040\023\uffc4\026\125\001\002" +
    "\000\032\004\030\005\004\006\uffc6\007\uffc6\020\013\023" +
    "\uffc6\026\uffc6\046\005\047\026\050\017\051\006\052\016" +
    "\001\002\000\004\023\uffc5\001\002\000\004\021\130\001" +
    "\002\000\056\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\020\uffec\022\uffec\023\uffec\030\uffec\037\uffec\040\uffec\041" +
    "\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec" +
    "\050\uffec\051\uffec\052\uffec\053\uffec\001\002\000\056\002" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\020\ufffd\022\ufffd" +
    "\023\ufffd\030\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043" +
    "\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd" +
    "\052\ufffd\053\ufffd\001\002\000\004\046\uffe7\001\002\000" +
    "\004\046\136\001\002\000\004\030\uffe6\001\002\000\006" +
    "\026\144\030\uffe4\001\002\000\010\012\137\026\uffe3\030" +
    "\uffe3\001\002\000\034\004\030\005\004\006\uffc6\007\uffc6" +
    "\020\013\022\140\026\uffc6\030\uffc6\046\005\047\026\050" +
    "\017\051\006\052\016\001\002\000\032\004\030\005\004" +
    "\006\uffc6\007\uffc6\020\013\023\uffc6\026\uffc6\046\005\047" +
    "\026\050\017\051\006\052\016\001\002\000\016\004\035" +
    "\005\036\006\034\007\040\026\uffe1\030\uffe1\001\002\000" +
    "\004\023\143\001\002\000\006\026\uffe2\030\uffe2\001\002" +
    "\000\004\046\136\001\002\000\004\030\uffe5\001\002\000" +
    "\004\002\000\001\002\000\054\002\uffff\004\uffff\005\uffff" +
    "\006\uffff\007\uffff\020\uffff\022\uffff\023\uffff\030\uffff\037" +
    "\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff" +
    "\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\001\002\000" +
    "\050\004\ufff5\005\ufff5\006\ufff5\007\ufff5\020\ufff5\022\ufff5" +
    "\030\ufff5\037\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045" +
    "\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5" +
    "\001\002\000\050\004\030\005\004\006\uffc6\007\uffc6\020" +
    "\013\022\010\030\uffc6\037\012\041\007\042\015\043\027" +
    "\044\024\045\014\046\005\047\026\050\017\051\006\052" +
    "\016\053\021\001\002\000\004\041\153\001\002\000\004" +
    "\020\154\001\002\000\046\004\030\005\004\006\uffc6\007" +
    "\uffc6\011\uffc6\013\044\014\uffc6\017\uffc6\020\046\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\046\005\047\026\050\017\051" +
    "\006\052\016\001\002\000\010\021\156\035\052\036\053" +
    "\001\002\000\004\030\ufff4\001\002\000\004\030\160\001" +
    "\002\000\056\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\020\ufff3\022\ufff3\023\ufff3\030\ufff3\037\ufff3\040\ufff3\041" +
    "\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3" +
    "\050\ufff3\051\ufff3\052\ufff3\053\ufff3\001\002\000\004\046" +
    "\163\001\002\000\004\030\uffe8\001\002\000\012\012\170" +
    "\024\167\026\uffde\030\uffde\001\002\000\006\026\165\030" +
    "\uffdf\001\002\000\004\046\163\001\002\000\004\030\uffe0" +
    "\001\002\000\006\046\172\047\173\001\002\000\032\004" +
    "\030\005\004\006\uffc6\007\uffc6\020\013\026\uffc6\030\uffc6" +
    "\046\005\047\026\050\017\051\006\052\016\001\002\000" +
    "\016\004\035\005\036\006\034\007\040\026\uffdd\030\uffdd" +
    "\001\002\000\004\025\201\001\002\000\004\025\174\001" +
    "\002\000\010\012\175\026\uffdc\030\uffdc\001\002\000\004" +
    "\022\176\001\002\000\032\004\030\005\004\006\uffc6\007" +
    "\uffc6\020\013\023\uffc6\026\uffc6\046\005\047\026\050\017" +
    "\051\006\052\016\001\002\000\004\023\200\001\002\000" +
    "\006\026\uffdb\030\uffdb\001\002\000\006\026\uffda\030\uffda" +
    "\001\002\000\014\004\035\005\036\006\034\007\040\021" +
    "\062\001\002\000\004\020\204\001\002\000\046\004\030" +
    "\005\004\006\uffc6\007\uffc6\011\uffc6\013\044\014\uffc6\017" +
    "\uffc6\020\046\031\uffc6\032\uffc6\033\uffc6\034\uffc6\046\005" +
    "\047\026\050\017\051\006\052\016\001\002\000\010\021" +
    "\206\035\052\036\053\001\002\000\050\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\020\ufffb\022\ufffb\030\ufffb\037\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\052\ufffb\053\ufffb\001\002\000\050\004" +
    "\030\005\004\006\uffc6\007\uffc6\020\013\022\010\030\uffc6" +
    "\037\012\041\007\042\015\043\027\044\024\045\014\046" +
    "\005\047\026\050\017\051\006\052\016\053\021\001\002" +
    "\000\056\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\020" +
    "\ufffa\022\ufffa\023\ufffa\030\ufffa\037\ufffa\040\ufffa\041\ufffa" +
    "\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050" +
    "\ufffa\051\ufffa\052\ufffa\053\ufffa\001\002\000\056\002\uffb5" +
    "\004\uffb5\005\uffb5\006\uffb5\007\uffb5\020\uffb5\022\uffb5\023" +
    "\uffb5\030\uffb5\037\uffb5\040\212\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\001\002\000\050\004\030\005\004\006\uffc6" +
    "\007\uffc6\020\013\022\010\030\uffc6\037\012\041\007\042" +
    "\015\043\027\044\024\045\014\046\005\047\026\050\017" +
    "\051\006\052\016\053\021\001\002\000\056\002\ufff9\004" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\020\ufff9\022\ufff9\023\ufff9" +
    "\030\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044" +
    "\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9" +
    "\053\ufff9\001\002\000\056\002\uffb6\004\uffb6\005\uffb6\006" +
    "\uffb6\007\uffb6\020\uffb6\022\uffb6\023\uffb6\030\uffb6\037\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\001\002" +
    "\000\056\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\020" +
    "\ufffe\022\ufffe\023\ufffe\030\ufffe\037\ufffe\040\ufffe\041\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050" +
    "\ufffe\051\ufffe\052\ufffe\053\ufffe\001\002\000\050\004\030" +
    "\005\004\006\uffc6\007\uffc6\020\013\022\010\030\uffc6\037" +
    "\012\041\007\042\015\043\027\044\024\045\014\046\005" +
    "\047\026\050\017\051\006\052\016\053\021\001\002\000" +
    "\052\004\030\005\004\006\uffc6\007\uffc6\020\013\022\010" +
    "\023\220\030\uffc6\037\012\041\007\042\015\043\027\044" +
    "\024\045\014\046\005\047\026\050\017\051\006\052\016" +
    "\053\021\001\002\000\056\002\uffea\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\020\uffea\022\uffea\023\uffea\030\uffea\037\uffea" +
    "\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046" +
    "\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\001\002" +
    "\000\004\020\ufff8\001\002\000\004\020\223\001\002\000" +
    "\046\004\030\005\004\006\uffc6\007\uffc6\011\uffc6\013\044" +
    "\014\uffc6\017\uffc6\020\046\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\046\005\047\026\050\017\051\006\052\016\001\002" +
    "\000\010\021\225\035\052\036\053\001\002\000\050\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\020\ufff7\022\ufff7\030\ufff7" +
    "\037\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046" +
    "\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\001\002" +
    "\000\050\004\030\005\004\006\uffc6\007\uffc6\020\013\022" +
    "\010\030\uffc6\037\012\041\007\042\015\043\027\044\024" +
    "\045\014\046\005\047\026\050\017\051\006\052\016\053" +
    "\021\001\002\000\056\002\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\020\ufff6\022\ufff6\023\ufff6\030\ufff6\037\ufff6\040" +
    "\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\001\002\000" +
    "\006\015\243\016\244\001\002\000\030\004\030\005\004" +
    "\006\uffc6\007\uffc6\020\013\025\uffc6\046\005\047\026\050" +
    "\017\051\006\052\016\001\002\000\064\004\030\005\004" +
    "\006\uffc6\007\uffc6\011\uffc6\014\uffc6\017\uffc6\020\013\021" +
    "\uffc6\022\233\023\uffc6\025\uffc6\026\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\046\005\047" +
    "\026\050\017\051\006\052\016\001\002\000\032\004\030" +
    "\005\004\006\uffc6\007\uffc6\020\013\023\uffc6\026\uffc6\046" +
    "\005\047\026\050\017\051\006\052\016\001\002\000\046" +
    "\004\035\005\036\006\034\007\040\011\uffcd\014\uffcd\017" +
    "\uffcd\021\uffcd\023\uffcd\025\uffcd\026\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\001\002\000" +
    "\004\023\236\001\002\000\046\004\uffca\005\uffca\006\uffca" +
    "\007\uffca\011\uffca\014\uffca\017\uffca\021\uffca\023\uffca\025" +
    "\uffca\026\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\001\002\000\014\004\035\005\036\006" +
    "\034\007\040\025\240\001\002\000\050\004\uffd4\005\uffd4" +
    "\006\uffd4\007\uffd4\011\uffd4\012\241\014\uffd4\017\uffd4\021" +
    "\uffd4\023\uffd4\025\uffd4\026\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\001\002\000\062\004" +
    "\030\005\004\006\uffc6\007\uffc6\011\uffc6\014\uffc6\017\uffc6" +
    "\020\013\021\uffc6\023\uffc6\025\uffc6\026\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\046\005" +
    "\047\026\050\017\051\006\052\016\001\002\000\046\004" +
    "\035\005\036\006\034\007\040\011\uffcc\014\uffcc\017\uffcc" +
    "\021\uffcc\023\uffcc\025\uffcc\026\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\001\002\000\046" +
    "\004\uffc9\005\uffc9\006\uffc9\007\uffc9\011\uffc9\014\uffc9\017" +
    "\uffc9\021\uffc9\023\uffc9\025\uffc9\026\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\001\002\000" +
    "\046\004\uffc8\005\uffc8\006\uffc8\007\uffc8\011\uffc8\014\uffc8" +
    "\017\uffc8\021\uffc8\023\uffc8\025\uffc8\026\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\001\002" +
    "\000\046\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf\014" +
    "\uffcf\017\uffcf\021\uffcf\023\uffcf\025\uffcf\026\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\014\002\017\003\021\004\024\005\022\011" +
    "\010\001\001\000\004\011\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\220\001\001\000\004\032" +
    "\215\001\001\000\002\001\001\000\004\013\202\001\001" +
    "\000\004\011\201\001\001\000\004\033\160\001\001\000" +
    "\004\013\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\146\004\024\005\022\011\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\032\001\001\000\002\001\001\000\004\011\113\001" +
    "\001\000\004\011\112\001\001\000\004\011\111\001\001" +
    "\000\004\026\041\001\001\000\004\011\040\001\001\000" +
    "\002\001\001\000\006\011\042\012\044\001\001\000\002" +
    "\001\001\000\006\011\042\012\110\001\001\000\002\001" +
    "\001\000\006\011\047\012\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\056\001" +
    "\001\000\004\036\054\001\001\000\002\001\001\000\006" +
    "\011\042\012\055\001\001\000\002\001\001\000\006\011" +
    "\042\012\057\001\001\000\002\001\001\000\004\011\076" +
    "\001\001\000\002\001\001\000\004\011\075\001\001\000" +
    "\004\011\074\001\001\000\004\011\073\001\001\000\004" +
    "\011\072\001\001\000\004\011\071\001\001\000\004\011" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\100\001\001\000\002" +
    "\001\001\000\004\027\102\001\001\000\004\011\103\001" +
    "\001\000\004\030\104\001\001\000\002\001\001\000\004" +
    "\031\106\001\001\000\012\003\107\004\024\005\022\011" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\117\001\001\000\006\010\122\011\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\125" +
    "\011\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\132\001\001" +
    "\000\006\016\133\017\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\140\001\001" +
    "\000\006\010\141\011\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\144\017\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\150\001\001\000\012\003\151\004\024" +
    "\005\022\011\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\042\012\154\001\001\000\002\001\001" +
    "\000\004\025\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\161\007\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\165\007" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\176\011\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\042\012\204\001\001\000\002\001\001\000" +
    "\004\020\206\001\001\000\012\003\207\004\024\005\022" +
    "\011\010\001\001\000\004\021\210\001\001\000\004\015" +
    "\212\001\001\000\012\003\213\004\024\005\022\011\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\002\216\003\021\004\024\005\022\011\010" +
    "\001\001\000\012\003\146\004\024\005\022\011\010\001" +
    "\001\000\002\001\001\000\004\022\221\001\001\000\002" +
    "\001\001\000\006\011\042\012\223\001\001\000\002\001" +
    "\001\000\004\023\225\001\001\000\012\003\226\004\024" +
    "\005\022\011\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\236\001\001\000\004\011\233\001\001" +
    "\000\006\010\234\011\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



 public void syntax_error(Symbol cur_token){
	}

 public void unrecovered_syntax_error(Symbol cur_token){
        System.err.println("Syntax error en linea" + PLXC.lex.getLine() + ", columna " + PLXC.lex.getColumna() + " con el token "+ sym.terminalNames[cur_token.sym]);
        // report_error("Syntax error", null);
        done_parsing();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    private int nVar = 0;
    

    public void MatrizComprobar(String s,String t){
      ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());
      PLXC.out.println("if ("+s+" < 0) goto "+e.sf+";");
      PLXC.out.println("if ("+t+" < "+ s+") goto "+e.sf+";");
      PLXC.out.println("if ("+t+" == "+ s+") goto "+e.sf+";");
      PLXC.out.println("goto "+e.sv+";");
      PLXC.out.println(e.sf+":");
      tablaS.Error();
      PLXC.out.println(e.sv+":");

    }
    public ArrayList<Objeto> reversa(ArrayList<Objeto> m){
      ArrayList<Objeto> res = new ArrayList<Objeto>();
      for(int i = m.size()-1;i>=0;i--){
         res.add(m.get(i));
      }
      return res;
    }
    public String tipoD;
    public Tipo getTipo(boolean matriz){
      Tipo res = null;
      switch(tipoD){
         case "int":
            if(matriz){
               res = TMInt.getInstancia();
            }else{
               res = TInt.getInstancia();
            }
            break;
         case "float":
            if(matriz){
               res = TMFloat.getInstancia();
            }else{
               res = TFloat.getInstancia();
            }
            break;
         case "char":
            if(matriz){
               res = TMChar.getInstancia();
            }else{
               res = TChar.getInstancia();
            }
            break;
         case "string":
               res = TString.getInstancia();
               break;
         default:
            tablaS.Error();
            break;
      }
      return res;
    }

    public TablaSimbolos tablaS = new TablaSimbolos();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Lista_de_sent ::= Sentencia 
            { parser.Tree.reduce(1,"Lista_de_sent",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Lista_de_sent EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_de_sent ::= Lista_de_sent Sentencia 
            { parser.Tree.reduce(2,"Lista_de_sent",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Sentencia ::= Expresion PYC 
            { parser.Tree.reduce(2,"Sentencia",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Sentencia ::= Declaracion PYC 
            { parser.Tree.reduce(2,"Sentencia",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Sentencia ::= Asignacion PYC 
            { parser.Tree.reduce(2,"Sentencia",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            { parser.Tree.reduce(0,"NT$0",0);
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            { parser.Tree.reduce(0,"NT$1",0);
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 PLXC.out.println("goto "+e+";");PLXC.out.println(c.sf +":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Sentencia ::= IF etiq_salto AP Condicion CP NT$0 Sentencia NT$1 else_If 
            { parser.Tree.reduce(9,"Sentencia",1);
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 PLXC.out.println(e+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            { parser.Tree.reduce(0,"NT$2",0);
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.out.println(e+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$3 ::= 
            { parser.Tree.reduce(0,"NT$3",0);
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sentencia ::= WHILE etiq_salto NT$2 AP Condicion CP NT$3 Sentencia 
            { parser.Tree.reduce(8,"Sentencia",1);
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 PLXC.out.println("goto "+e+";");PLXC.out.println(c.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$4 ::= 
            { parser.Tree.reduce(0,"NT$4",0);
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.out.println(e+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$5 ::= 
            { parser.Tree.reduce(0,"NT$5",0);
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c.sv+":");PLXC.out.println("goto "+e+";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Sentencia ::= DO etiq_salto NT$4 Sentencia WHILE AP Condicion CP NT$5 PYC 
            { parser.Tree.reduce(10,"Sentencia",1);
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 PLXC.out.println(c.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$6 ::= 
            { parser.Tree.reduce(0,"NT$6",0);
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(e.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            { parser.Tree.reduce(0,"NT$7",0);
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(e.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$8 ::= 
            { parser.Tree.reduce(0,"NT$8",0);
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.out.println("goto "+e.sv+" ;"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$9 ::= 
            { parser.Tree.reduce(0,"NT$9",0);
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 PLXC.out.println(c.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= FOR etiq_bucle AP Expresion PYC NT$6 Condicion PYC NT$7 Expresion NT$8 CP NT$9 Sentencia 
            { parser.Tree.reduce(14,"Sentencia",1);
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 PLXC.out.println("goto "+e.sf+";");PLXC.out.println(c.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Sentencia ::= PRINT AP Expresion CP PYC 
            { parser.Tree.reduce(5,"Sentencia",1);
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Vector<Objeto> p = new Vector<Objeto>();e.metodos("print",p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sentencia ::= PRINT AP ALL Matriz_aux CLL CP 
            { parser.Tree.reduce(6,"Sentencia",1);
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Objeto> m = (ArrayList<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 m = reversa(m);for(Objeto o:m){Vector<Objeto> p = new Vector<Objeto>();o.metodos("print",p);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$10 ::= 
            { parser.Tree.reduce(0,"NT$10",0);
              Object RESULT =null;
  tablaS.newBloque(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Sentencia ::= ALL NT$10 Lista_de_sent CLL 
            { parser.Tree.reduce(4,"Sentencia",1);
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 tablaS.borrarBloque(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$11 ::= 
            { parser.Tree.reduce(0,"NT$11",0);
              ArrayList<String> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tipoD = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Declaracion ::= TIPO NT$11 Lista 
            { parser.Tree.reduce(3,"Declaracion",0);
              ArrayList<String> RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (ArrayList<String>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 tipoD = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$12 ::= 
            { parser.Tree.reduce(0,"NT$12",0);
              ArrayList<String> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tipoD = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Declaracion ::= SET TIPO NT$12 Set 
            { parser.Tree.reduce(4,"Declaracion",0);
              ArrayList<String> RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (ArrayList<String>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 tipoD = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Set ::= Set_aux COMA Set 
            { parser.Tree.reduce(3,"Set",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Set",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Set ::= Set_aux 
            { parser.Tree.reduce(1,"Set",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Set",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Set_aux ::= IDENT 
            { parser.Tree.reduce(1,"Set_aux",0);
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                               if(!tablaS.contiene(i)){
                                                                  Instancia o = new Instancia(i,TSet.getInstancia(),tablaS.bActual,true);
                                                                  tablaS.addObj(o);
                                                               }else{ 
                                                                  tablaS.Error();
                                                               }
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Set_aux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Set_aux ::= IDENT ASIGNA ALL Matriz_aux CLL 
            { parser.Tree.reduce(5,"Set_aux",0);
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Objeto> m = (ArrayList<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                  if(!tablaS.contiene(i)){
                                                                     Instancia o = new Instancia(i,TSet.getInstancia(),tablaS.bActual,true);
                                                                     tablaS.addObj(o);
                                                                  }else{ 
                                                                     tablaS.Error();
                                                                  }
                                                                  m = reversa(m);
                                                                  Vector<Objeto> aux = new Vector<Objeto>();
                                                                  for(Objeto v: m){
                                                                     aux.add(v); 
                                                                  }
                                                                  Instancia o = new Instancia(i,TSet.getInstancia(),tablaS.bActual,true);
                                                                  o.metodos("asigna",aux);
                                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Set_aux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Set_aux ::= IDENT ASIGNA Expresion 
            { parser.Tree.reduce(3,"Set_aux",0);
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                           Instancia o = null;
                                                                        if(!tablaS.contiene(i)){
                                                                            o = new Instancia(i,TSet.getInstancia(),tablaS.bActual,true);
                                                                           tablaS.addObj(o);
                                                                        }else{ 
                                                                           tablaS.Error();
                                                                        }
                                                                        Vector<Objeto> p = new Vector<Objeto>();
                                                                        p.add(e);
                                                                        if(((Instancia )e).getTipo() == TSet.getInstancia()){
                                                                           RESULT = o.metodos("asignaS",p);
                                                                        }else{
                                                                           RESULT = o.metodos("asignaA",p);
                                                                        }
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Set_aux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Lista ::= Lista_aux COMA Lista 
            { parser.Tree.reduce(3,"Lista",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Lista ::= Lista_aux 
            { parser.Tree.reduce(1,"Lista",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Lista_aux ::= IDENT 
            { parser.Tree.reduce(1,"Lista_aux",0);
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                              if(!tablaS.contiene(i)){
                                                                  Instancia o = new Instancia(i,getTipo(false),tablaS.bActual,true);
                                                                  tablaS.addObj(o);
                                                               }else{ 
                                                                  tablaS.Error();
                                                               }
                                                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_aux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Lista_aux ::= IDENT ASIGNA Expresion 
            { parser.Tree.reduce(3,"Lista_aux",0);
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                                                             if(!tablaS.contiene(i)){
                                                                  Instancia o = new Instancia(i,getTipo(false),tablaS.bActual,true);
                                                                  tablaS.addObj(o);
                                                               }else{ 
                                                                  tablaS.Error();
                                                               }
                                                             Objeto o = tablaS.objeto(i);
                                                             if (!(o instanceof Instancia)) {
                                                                tablaS.Error();
                                                             }
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             p.add(e);
                                                             o.metodos("asigna", p);
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_aux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Lista_aux ::= IDENT AC ENTERO CC 
            { parser.Tree.reduce(4,"Lista_aux",0);
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                              if(!tablaS.contiene(i)){
                                                                  Instancia o = new Instancia(i,getTipo(true),tablaS.bActual,true);
                                                                  tablaS.addObj(o);
                                                                  tablaS.addTam(o,Integer.parseInt(e));
                                                                  PLXC.out.println(i+"_length = "+e+";");

                                                               }else{ 
                                                                  tablaS.Error();
                                                               }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_aux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Lista_aux ::= IDENT AC ENTERO CC ASIGNA ALL Matriz_aux CLL 
            { parser.Tree.reduce(8,"Lista_aux",0);
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Objeto> m = (ArrayList<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                              if(!tablaS.contiene(i)){
                                                                  Instancia o = new Instancia(i,getTipo(true),tablaS.bActual,true);
                                                                  tablaS.addObj(o);
                                                                  tablaS.addTam(o,Integer.parseInt(e));
                                                                  PLXC.out.println(i+"_length = "+e+";");
                                                                  m = reversa(m);
                                                                  int pos = 0;
                                                                  for(Objeto v: m){
                                                                     Vector<Objeto> p = new Vector<Objeto>();
                                                                     p.add(v);
                                                                     Instancia tam = new Instancia(String.valueOf(pos),TInt.getInstancia(),0,false);
                                                                     p.add(tam);
                                                                     o.metodos("asignaInd", p);
                                                                     pos++;
                                                                  }
                                                               }else{ 
                                                                  tablaS.Error();
                                                               }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_aux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Lista_aux ::= IDENT AC IDENT CC 
            { parser.Tree.reduce(4,"Lista_aux",0);
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 tablaS.Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_aux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expresion ::= ENTERO 
            { parser.Tree.reduce(1,"Expresion",0);
              Objeto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Instancia o = new Instancia(e,TInt.getInstancia(),tablaS.bActual,false);RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expresion ::= FLOAT 
            { parser.Tree.reduce(1,"Expresion",0);
              Objeto RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Instancia o = new Instancia(f,TFloat.getInstancia(),tablaS.bActual,false);RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expresion ::= CHAR 
            { parser.Tree.reduce(1,"Expresion",0);
              Objeto RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Instancia o = new Instancia(c,TChar.getInstancia(),tablaS.bActual,false);RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresion ::= STRING 
            { parser.Tree.reduce(1,"Expresion",0);
              Objeto RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Instancia o = new Instancia(s,TString.getInstancia(),tablaS.bActual,false);RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expresion ::= IDENT 
            { parser.Tree.reduce(1,"Expresion",0);
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tablaS.objeto(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion ::= IDENT AC Expresion CC 
            { parser.Tree.reduce(4,"Expresion",0);
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Objeto obj = tablaS.objeto(i); Vector<Objeto> p = new Vector<Objeto>();Instancia o = new Instancia(e.getNombre(),TInt.getInstancia(),tablaS.bActual,false);p.add(o); RESULT = obj.metodos("obtener",p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= Expresion MAS Expresion 
            { parser.Tree.reduce(3,"Expresion",0);
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             if(((Instancia) e1).getTipo() == TFloat.getInstancia()){
                                                                p.add(e2);
                                                                RESULT = e1.metodos("suma", p);
                                                             }else if(((Instancia) e2).getTipo() == TFloat.getInstancia()){
                                                                p.add(e1);
                                                                RESULT = e2.metodos("suma", p);
                                                             }else if(((Instancia) e1).getTipo() == TInt.getInstancia()){
                                                                p.add(e2);
                                                                RESULT = e1.metodos("suma",p);
                                                             }else if(((Instancia) e2).getTipo() == TInt.getInstancia()){
                                                                p.add(e1);
                                                                RESULT = e2.metodos("suma",p);
                                                             }else{
                                                                p.add(e2);
                                                                RESULT = e1.metodos("suma", p);
                                                             }
                                                             
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresion ::= Expresion MENOS Expresion 
            { parser.Tree.reduce(3,"Expresion",0);
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             if(((Instancia) e1).getTipo() == TFloat.getInstancia()){
                                                                p.add(e2);
                                                                RESULT = e1.metodos("resta", p);
                                                             }else if(((Instancia) e2).getTipo() == TFloat.getInstancia()){
                                                                p.add(e1);
                                                                RESULT = e2.metodos("resta", p);
                                                             }else{
                                                                p.add(e2);
                                                                RESULT = e1.metodos("resta", p);
                                                             }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion ::= Expresion MULT Expresion 
            { parser.Tree.reduce(3,"Expresion",0);
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             if(((Instancia) e1).getTipo() == TFloat.getInstancia()){
                                                                p.add(e2);
                                                                RESULT = e1.metodos("multiplicar", p);
                                                             }else if(((Instancia) e2).getTipo() == TFloat.getInstancia()){
                                                                p.add(e1);
                                                                RESULT = e2.metodos("multiplicar", p);
                                                             }else{
                                                                p.add(e2);
                                                                RESULT = e1.metodos("multiplicar", p);
                                                             }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expresion ::= Expresion DIVID Expresion 
            { parser.Tree.reduce(3,"Expresion",0);
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             if(((Instancia) e1).getTipo() == TFloat.getInstancia()){
                                                                p.add(e2);
                                                                RESULT = e1.metodos("dividir", p);
                                                             }else if(((Instancia) e2).getTipo() == TFloat.getInstancia()){
                                                                p.add(e1);
                                                                RESULT = e2.metodos("dividir", p);
                                                             }else{
                                                                p.add(e2);
                                                                RESULT = e1.metodos("dividir", p);
                                                             }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion ::= MENOS Expresion 
            { parser.Tree.reduce(2,"Expresion",0);
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             RESULT = e1.metodos("menosUnario",p);
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion ::= AP Expresion CP 
            { parser.Tree.reduce(3,"Expresion",0);
              Objeto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion ::= IDENT ASIGNA Expresion 
            { parser.Tree.reduce(3,"Expresion",0);
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                             if (!tablaS.contiene(i)) {
                                                                tablaS.Error();
                                                             }
                                                             Objeto o = tablaS.objeto(i);
                                                             if (!(o instanceof Instancia)) {
                                                                tablaS.Error();
                                                             }
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             p.add(e);
                                                             if(((Instancia) o).getTipo() != TSet.getInstancia()){
                                                             RESULT = o.metodos("asigna", p);
                                                             }else{
                                                               if(((Instancia) e).getTipo() == TSet.getInstancia()){
                                                                  RESULT = o.metodos("asignaS",p);
                                                               }else{
                                                                  RESULT = o.metodos("asignaA",p);
                                                               }
                                                             }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion ::= IDENT AC Expresion CC ASIGNA Expresion 
            { parser.Tree.reduce(6,"Expresion",0);
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                             

                                                             
                                                             if (!tablaS.contiene(i)) {
                                                                tablaS.Error();
                                                             }
                                                             Objeto o = tablaS.objeto(i);
                                                             if (!(o instanceof Instancia)) {
                                                                tablaS.Error();
                                                             }
                                                             MatrizComprobar(e1.getNombre(),tablaS.getTam(o));
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             if(((Instancia) o).getTipo() == TMFloat.getInstancia() && ((Instancia) e2).getTipo() == TInt.getInstancia()){
                                                               Vector<Objeto> p2 = new Vector<Objeto>();
                                                               p2.add(TFloat.getInstancia());
                                                               e2 = e2.metodos("convertir",p2);
                                                             }
                                                             p.add(e2);
                                                             Instancia tam = new Instancia(e1.getNombre(),TInt.getInstancia(),0,false);
                                                             p.add(tam);
                                                             RESULT = o.metodos("asignaInd", p);
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion ::= AP TIPO CP Expresion 
            { parser.Tree.reduce(4,"Expresion",0);
              Objeto RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                            Vector<Objeto> p = new Vector<Objeto>();
                                                            switch(t){
                                                                case "int":
                                                                    p.add(TInt.getInstancia());
                                                                    break;
                                                                case "float":
                                                                    p.add(TFloat.getInstancia());
                                                                    break;
                                                                case "char":
                                                                    p.add(TChar.getInstancia());
                                                                    break;
                                                                default:
                                                                    TablaSimbolos.Error();
                                                                    break;
                                                            }
                                                            RESULT = e.metodos("convertir", p);
            
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion ::= IDENT ASIGNA ALL Matriz_aux CLL 
            { parser.Tree.reduce(5,"Expresion",0);
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Objeto> m = (ArrayList<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                            if (!tablaS.contiene(i)) {
                                                                tablaS.Error();
                                                             }
                                                             Objeto o = tablaS.objeto(i);
                                                             if (!(o instanceof Instancia)) {
                                                                tablaS.Error();
                                                             }
                                                           
                                                             if(!(((Instancia) o).getTipo() == TSet.getInstancia())){
                                                             m = reversa(m);
                                                             int pos = 0;
                                                            for(Objeto v: m){
                                                                Vector<Objeto> p = new Vector<Objeto>();
                                                                p.add(v);
                                                                Instancia tam = new Instancia(String.valueOf(pos),TInt.getInstancia(),0,false);
                                                                p.add(tam);
                                                                o.metodos("asignaInd", p);
                                                                pos++;
                                                            }
                                                             }else{
                                                               m = reversa(m);
                                                               Vector<Objeto> aux = new Vector<Objeto>();
                                                               for(Objeto v: m){
                                                                 aux.add(v); 
                                                               }
                                                               o.metodos("asigna",aux);
                                                             }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expresion ::= IDENT PUNTO LENGTH 
            { parser.Tree.reduce(3,"Expresion",0);
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Instancia(i+"_"+l,TInt.getInstancia(),0,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expresion ::= IDENT PUNTO SIZE 
            { parser.Tree.reduce(3,"Expresion",0);
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Instancia("$"+i+"_length",TInt.getInstancia(),0,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expresion ::= MAS 
            { parser.Tree.reduce(1,"Expresion",0);
              Objeto RESULT =null;
		 RESULT = new Instancia("1",TInt.getInstancia(),0,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expresion ::= 
            { parser.Tree.reduce(0,"Expresion",0);
              Objeto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Matriz_aux ::= Expresion COMA Matriz_aux 
            { parser.Tree.reduce(3,"Matriz_aux",0);
              ArrayList<Objeto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Objeto> m = (ArrayList<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 m.add(e); RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Matriz_aux",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Matriz_aux ::= Expresion 
            { parser.Tree.reduce(1,"Matriz_aux",0);
              ArrayList<Objeto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<Objeto> m = new ArrayList<Objeto>();m.add(e); RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Matriz_aux",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Condicion ::= Expresion IGUAL Expresion 
            { parser.Tree.reduce(3,"Condicion",0);
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e1.getNombre()+"=="+e2.getNombre()+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Condicion ::= Expresion DIF Expresion 
            { parser.Tree.reduce(3,"Condicion",0);
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e1.getNombre()+"=="+e2.getNombre()+") goto "+e.sf+";");PLXC.out.println("goto "+e.sv+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Condicion ::= Expresion MENOR Expresion 
            { parser.Tree.reduce(3,"Condicion",0);
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e1.getNombre()+"<"+e2.getNombre()+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Condicion ::= Expresion MENIG Expresion 
            { parser.Tree.reduce(3,"Condicion",0);
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e1.getNombre()+"=="+e2.getNombre()+") goto "+e.sv+";");PLXC.out.println("if("+e1.getNombre()+"<"+e2.getNombre()+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Condicion ::= Expresion MAYOR Expresion 
            { parser.Tree.reduce(3,"Condicion",0);
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e2.getNombre()+"<"+e1.getNombre()+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Condicion ::= Expresion MAYIG Expresion 
            { parser.Tree.reduce(3,"Condicion",0);
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e1.getNombre()+"=="+e2.getNombre()+") goto "+e.sv+";");PLXC.out.println("if("+e2.getNombre()+"<"+e1.getNombre()+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Condicion ::= NOT Condicion 
            { parser.Tree.reduce(2,"Condicion",0);
              ParEt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt p = new ParEt(c.sf,c.sv);RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$13 ::= 
            { parser.Tree.reduce(0,"NT$13",0);
              ParEt RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c1.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Condicion ::= Condicion AND NT$13 Condicion 
            { parser.Tree.reduce(4,"Condicion",0);
              ParEt RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (ParEt) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c2 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt p = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println(c2.sv+":"); PLXC.out.println("goto "+p.sv+";");PLXC.out.println(c1.sf+":");PLXC.out.println(c2.sf+":");PLXC.out.println("goto "+p.sf+";");RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$14 ::= 
            { parser.Tree.reduce(0,"NT$14",0);
              ParEt RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c1.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Condicion ::= Condicion OR NT$14 Condicion 
            { parser.Tree.reduce(4,"Condicion",0);
              ParEt RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (ParEt) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c2 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt p = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println(c2.sf+":"); PLXC.out.println("goto "+p.sf+";");PLXC.out.println(c1.sv+":");PLXC.out.println(c2.sv+":");PLXC.out.println("goto "+p.sv+";");RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Condicion ::= AP Condicion CP 
            { parser.Tree.reduce(3,"Condicion",0);
              ParEt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Condicion ::= Expresion IN Expresion 
            { parser.Tree.reduce(3,"Condicion",0);
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Objeto t0 = new Instancia(Objeto.newNumObj(),TMInt.getInstancia(),TablaSimbolos.bActual,false);
            Objeto t1 = new Instancia(Objeto.newNumObj(),TMInt.getInstancia(),TablaSimbolos.bActual,false);
            ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq()); //sv == L2 sf==L3
            String L4 = TablaSimbolos.newEtiq();
            PLXC.out.println("   $"+t0.getNombre()+" = 0;\r\n" + //
                    ""+L4+":\r\n" + //
                    "   if ($"+e2.getNombre()+"_length < $"+t0.getNombre()+") goto "+e.sf+";\r\n" + //
                    "   if ($"+e2.getNombre()+"_length == $"+t0.getNombre()+") goto "+e.sf+";\r\n" + //
                    "   $"+t1.getNombre()+" = "+e2.getNombre()+"[$"+t0.getNombre()+"];\r\n" + //
                    "   if ($"+t1.getNombre()+" == "+e1.getNombre()+") goto "+e.sv+";\r\n" + //
                    "   $"+t0.getNombre()+" = $"+t0.getNombre()+" + 1;\r\n" + //
                    "   goto "+L4+";\r\n"); RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // else_If ::= ELSE Sentencia 
            { parser.Tree.reduce(2,"else_If",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_If",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // else_If ::= 
            { parser.Tree.reduce(0,"else_If",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_If",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // etiq_salto ::= 
            { parser.Tree.reduce(0,"etiq_salto",0);
              String RESULT =null;
		 RESULT = tablaS.newEtiq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiq_salto",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // etiq_bucle ::= 
            { parser.Tree.reduce(0,"etiq_bucle",0);
              ParEt RESULT =null;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiq_bucle",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

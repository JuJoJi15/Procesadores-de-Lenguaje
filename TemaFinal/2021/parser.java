
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java.io.IOException;
import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\020\002\000\002\021\002\000\002\003\013\000" +
    "\002\022\002\000\002\023\002\000\002\003\012\000\002" +
    "\024\002\000\002\025\002\000\002\003\014\000\002\026" +
    "\002\000\002\027\002\000\002\030\002\000\002\031\002" +
    "\000\002\003\020\000\002\003\007\000\002\032\002\000" +
    "\002\003\012\000\002\033\002\000\002\003\012\000\002" +
    "\003\010\000\002\034\002\000\002\003\006\000\002\035" +
    "\002\000\002\005\005\000\002\036\002\000\002\005\006" +
    "\000\002\006\005\000\002\006\003\000\002\007\003\000" +
    "\002\007\005\000\002\007\006\000\002\007\012\000\002" +
    "\007\006\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\006" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\004\000\002\012\004\000\002" +
    "\012\005\000\002\012\005\000\002\012\010\000\002\012" +
    "\006\000\002\012\007\000\002\012\005\000\002\012\007" +
    "\000\002\012\005\000\002\012\002\000\002\017\005\000" +
    "\002\017\003\000\002\011\005\000\002\011\003\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\004" +
    "\000\002\037\002\000\002\013\006\000\002\040\002\000" +
    "\002\013\006\000\002\013\005\000\002\016\004\000\002" +
    "\016\002\000\002\014\002\000\002\015\002\000\002\010" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\052\004\031\005\004\006\uffc6\007\uffc6\017" +
    "\014\021\011\027\uffc6\036\013\040\010\041\016\042\027" +
    "\043\024\044\030\046\006\047\015\050\005\051\026\052" +
    "\020\053\007\054\017\001\002\000\060\004\031\005\004" +
    "\006\uffc6\007\uffc6\011\uffc6\014\uffc6\017\014\020\uffc6\022" +
    "\uffc6\024\uffc6\025\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\035\uffc6\050\005\051\026\052\020\053" +
    "\007\054\017\001\002\000\052\004\uffd6\005\uffd6\006\uffd6" +
    "\007\uffd6\011\uffd6\012\237\014\uffd6\020\uffd6\022\uffd6\023" +
    "\236\024\uffd6\025\uffd6\026\235\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\001\002\000\052\004" +
    "\031\005\004\006\uffc6\007\uffc6\017\014\021\011\027\uffc6" +
    "\036\013\040\010\041\016\042\027\043\024\044\030\046" +
    "\006\047\015\050\005\051\026\052\020\053\007\054\017" +
    "\001\002\000\044\004\uffd8\005\uffd8\006\uffd8\007\uffd8\011" +
    "\uffd8\014\uffd8\020\uffd8\022\uffd8\024\uffd8\025\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\001" +
    "\002\000\004\017\uffb3\001\002\000\052\004\uffe7\005\uffe7" +
    "\006\uffe7\007\uffe7\017\uffe7\021\uffe7\027\uffe7\036\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\046\uffe7\047\uffe7" +
    "\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\001\002\000" +
    "\014\004\034\005\035\006\033\007\036\027\217\001\002" +
    "\000\004\017\uffb3\001\002\000\032\004\031\005\004\006" +
    "\uffc6\007\uffc6\017\014\020\uffc6\047\072\050\005\051\026" +
    "\052\020\053\007\054\017\001\002\000\004\050\uffe5\001" +
    "\002\000\052\004\uffb3\005\uffb3\006\uffb3\007\uffb3\017\uffb3" +
    "\021\uffb3\027\uffb3\036\uffb3\040\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\053\uffb3\054\uffb3\001\002\000\044\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\011\uffd7\014\uffd7\020\uffd7\022\uffd7\024\uffd7" +
    "\025\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\001\002\000\044\004\uffd9\005\uffd9\006\uffd9" +
    "\007\uffd9\011\uffd9\014\uffd9\020\uffd9\022\uffd9\024\uffd9\025" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\001\002\000\054\002\150\004\031\005\004\006" +
    "\uffc6\007\uffc6\017\014\021\011\027\uffc6\036\013\040\010" +
    "\041\016\042\027\043\024\044\030\046\006\047\015\050" +
    "\005\051\026\052\020\053\007\054\017\001\002\000\056" +
    "\002\001\004\001\005\001\006\001\007\001\017\001\021" +
    "\001\022\001\027\001\036\001\040\001\041\001\042\001" +
    "\043\001\044\001\046\001\047\001\050\001\051\001\052" +
    "\001\053\001\054\001\001\002\000\004\027\147\001\002" +
    "\000\004\017\134\001\002\000\004\027\133\001\002\000" +
    "\044\004\uffda\005\uffda\006\uffda\007\uffda\011\uffda\014\uffda" +
    "\020\uffda\022\uffda\024\uffda\025\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\001\002\000\004" +
    "\017\uffb2\001\002\000\006\017\044\045\043\001\002\000" +
    "\060\004\031\005\004\006\uffc6\007\uffc6\011\uffc6\014\uffc6" +
    "\017\014\020\uffc6\022\uffc6\024\uffc6\025\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\050\005" +
    "\051\026\052\020\053\007\054\017\001\002\000\044\004" +
    "\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf\014\uffcf\020\uffcf" +
    "\022\uffcf\024\uffcf\025\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\001\002\000\060\004\031" +
    "\005\004\006\uffc6\007\uffc6\011\uffc6\014\uffc6\017\014\020" +
    "\uffc6\022\uffc6\024\uffc6\025\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\035\uffc6\050\005\051\026\052" +
    "\020\053\007\054\017\001\002\000\060\004\031\005\004" +
    "\006\uffc6\007\uffc6\011\uffc6\014\uffc6\017\014\020\uffc6\022" +
    "\uffc6\024\uffc6\025\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\035\uffc6\050\005\051\026\052\020\053" +
    "\007\054\017\001\002\000\060\004\031\005\004\006\uffc6" +
    "\007\uffc6\011\uffc6\014\uffc6\017\014\020\uffc6\022\uffc6\024" +
    "\uffc6\025\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\050\005\051\026\052\020\053\007\054" +
    "\017\001\002\000\060\004\031\005\004\006\uffc6\007\uffc6" +
    "\011\uffc6\014\uffc6\017\014\020\uffc6\022\uffc6\024\uffc6\025" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\050\005\051\026\052\020\053\007\054\017\001" +
    "\002\000\044\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1" +
    "\014\uffd1\020\uffd1\022\uffd1\024\uffd1\025\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\001\002" +
    "\000\044\004\uffd3\005\uffd3\006\033\007\036\011\uffd3\014" +
    "\uffd3\020\uffd3\022\uffd3\024\uffd3\025\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\001\002\000" +
    "\044\004\uffd4\005\uffd4\006\033\007\036\011\uffd4\014\uffd4" +
    "\020\uffd4\022\uffd4\024\uffd4\025\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\001\002\000\044" +
    "\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2\014\uffd2\020" +
    "\uffd2\022\uffd2\024\uffd2\025\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\001\002\000\004\017" +
    "\uffb2\001\002\000\030\004\031\005\004\006\uffc6\007\uffc6" +
    "\017\014\020\uffc6\050\005\051\026\052\020\053\007\054" +
    "\017\001\002\000\014\004\034\005\035\006\033\007\036" +
    "\020\046\001\002\000\052\004\uffb1\005\uffb1\006\uffb1\007" +
    "\uffb1\017\uffb1\021\uffb1\027\uffb1\036\uffb1\040\uffb1\041\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\046\uffb1\047\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\053\uffb1\054\uffb1\001\002\000\052\004\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\017\uffb2\021\uffb2\027\uffb2\036" +
    "\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\001" +
    "\002\000\052\004\uffec\005\uffec\006\uffec\007\uffec\017\uffec" +
    "\021\uffec\027\uffec\036\uffec\040\uffec\041\uffec\042\uffec\043" +
    "\uffec\044\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec" +
    "\053\uffec\054\uffec\001\002\000\052\004\031\005\004\006" +
    "\uffc6\007\uffc6\017\014\021\011\027\uffc6\036\013\040\010" +
    "\041\016\042\027\043\024\044\030\046\006\047\015\050" +
    "\005\051\026\052\020\053\007\054\017\001\002\000\060" +
    "\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\017\uffeb\021" +
    "\uffeb\022\uffeb\027\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb" +
    "\042\uffeb\043\uffeb\044\uffeb\046\uffeb\047\uffeb\050\uffeb\051" +
    "\uffeb\052\uffeb\053\uffeb\054\uffeb\001\002\000\004\017\054" +
    "\001\002\000\030\004\031\005\004\006\uffc6\007\uffc6\017" +
    "\014\020\uffc6\050\005\051\026\052\020\053\007\054\017" +
    "\001\002\000\014\004\034\005\035\006\033\007\036\020" +
    "\056\001\002\000\052\004\uffea\005\uffea\006\uffea\007\uffea" +
    "\017\uffea\021\uffea\027\uffea\036\uffea\040\uffea\041\uffea\042" +
    "\uffea\043\uffea\044\uffea\046\uffea\047\uffea\050\uffea\051\uffea" +
    "\052\uffea\053\uffea\054\uffea\001\002\000\052\004\031\005" +
    "\004\006\uffc6\007\uffc6\017\014\021\011\027\uffc6\036\013" +
    "\040\010\041\016\042\027\043\024\044\030\046\006\047" +
    "\015\050\005\051\026\052\020\053\007\054\017\001\002" +
    "\000\060\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\017" +
    "\uffe9\021\uffe9\022\uffe9\027\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\041\uffe9\042\uffe9\043\uffe9\044\uffe9\046\uffe9\047\uffe9\050" +
    "\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\001\002\000\004" +
    "\017\062\001\002\000\030\004\031\005\004\006\uffc6\007" +
    "\uffc6\017\014\027\uffc6\050\005\051\026\052\020\053\007" +
    "\054\017\001\002\000\014\004\034\005\035\006\033\007" +
    "\036\027\064\001\002\000\044\004\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\011\ufff2\013\ufff2\014\ufff2\017\ufff2\030\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2" +
    "\054\ufff2\001\002\000\044\004\031\005\004\006\uffc6\007" +
    "\uffc6\011\uffc6\013\067\014\uffc6\017\071\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\050\005\051\026\052\020\053\007\054" +
    "\017\001\002\000\026\004\034\005\035\006\033\007\036" +
    "\011\111\014\107\030\110\031\104\032\105\033\112\001" +
    "\002\000\044\004\031\005\004\006\uffc6\007\uffc6\011\uffc6" +
    "\013\067\014\uffc6\017\071\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\050\005\051\026\052\020\053\007\054\017\001\002" +
    "\000\010\027\123\034\075\035\076\001\002\000\050\004" +
    "\031\005\004\006\uffc6\007\uffc6\011\uffc6\013\067\014\uffc6" +
    "\017\071\020\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\047" +
    "\072\050\005\051\026\052\020\053\007\054\017\001\002" +
    "\000\004\020\121\001\002\000\030\004\034\005\035\006" +
    "\033\007\036\011\111\014\107\020\106\030\110\031\104" +
    "\032\105\033\112\001\002\000\010\020\077\034\075\035" +
    "\076\001\002\000\044\004\uffba\005\uffba\006\uffba\007\uffba" +
    "\011\uffba\013\uffba\014\uffba\017\uffba\030\uffba\031\uffba\032" +
    "\uffba\033\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\001\002\000\044\004\uffb8\005\uffb8\006\uffb8\007\uffb8\011" +
    "\uffb8\013\uffb8\014\uffb8\017\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\001" +
    "\002\000\012\020\uffb6\027\uffb6\034\uffb6\035\uffb6\001\002" +
    "\000\044\004\031\005\004\006\uffc6\007\uffc6\011\uffc6\013" +
    "\067\014\uffc6\017\071\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\050\005\051\026\052\020\053\007\054\017\001\002\000" +
    "\012\020\uffb7\027\uffb7\034\075\035\uffb7\001\002\000\044" +
    "\004\031\005\004\006\uffc6\007\uffc6\011\uffc6\013\067\014" +
    "\uffc6\017\071\030\uffc6\031\uffc6\032\uffc6\033\uffc6\050\005" +
    "\051\026\052\020\053\007\054\017\001\002\000\012\020" +
    "\uffb9\027\uffb9\034\uffb9\035\uffb9\001\002\000\036\004\031" +
    "\005\004\006\uffc6\007\uffc6\017\014\020\uffc6\027\uffc6\034" +
    "\uffc6\035\uffc6\050\005\051\026\052\020\053\007\054\017" +
    "\001\002\000\036\004\031\005\004\006\uffc6\007\uffc6\017" +
    "\014\020\uffc6\027\uffc6\034\uffc6\035\uffc6\050\005\051\026" +
    "\052\020\053\007\054\017\001\002\000\044\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\011\uffce\014\uffce\020\uffce\022\uffce" +
    "\024\uffce\025\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\001\002\000\036\004\031\005\004" +
    "\006\uffc6\007\uffc6\017\014\020\uffc6\027\uffc6\034\uffc6\035" +
    "\uffc6\050\005\051\026\052\020\053\007\054\017\001\002" +
    "\000\036\004\031\005\004\006\uffc6\007\uffc6\017\014\020" +
    "\uffc6\027\uffc6\034\uffc6\035\uffc6\050\005\051\026\052\020" +
    "\053\007\054\017\001\002\000\036\004\031\005\004\006" +
    "\uffc6\007\uffc6\017\014\020\uffc6\027\uffc6\034\uffc6\035\uffc6" +
    "\050\005\051\026\052\020\053\007\054\017\001\002\000" +
    "\036\004\031\005\004\006\uffc6\007\uffc6\017\014\020\uffc6" +
    "\027\uffc6\034\uffc6\035\uffc6\050\005\051\026\052\020\053" +
    "\007\054\017\001\002\000\022\004\034\005\035\006\033" +
    "\007\036\020\uffbe\027\uffbe\034\uffbe\035\uffbe\001\002\000" +
    "\022\004\034\005\035\006\033\007\036\020\uffc1\027\uffc1" +
    "\034\uffc1\035\uffc1\001\002\000\022\004\034\005\035\006" +
    "\033\007\036\020\uffbd\027\uffbd\034\uffbd\035\uffbd\001\002" +
    "\000\022\004\034\005\035\006\033\007\036\020\uffc0\027" +
    "\uffc0\034\uffc0\035\uffc0\001\002\000\022\004\034\005\035" +
    "\006\033\007\036\020\uffbc\027\uffbc\034\uffbc\035\uffbc\001" +
    "\002\000\022\004\034\005\035\006\033\007\036\020\uffbf" +
    "\027\uffbf\034\uffbf\035\uffbf\001\002\000\060\004\031\005" +
    "\004\006\uffc6\007\uffc6\011\uffc6\014\uffc6\017\014\020\uffc6" +
    "\022\uffc6\024\uffc6\025\uffc6\027\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\050\005\051\026\052\020" +
    "\053\007\054\017\001\002\000\044\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\011\uffcb\014\uffcb\020\uffcb\022\uffcb\024\uffcb" +
    "\025\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\001\002\000\030\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\017\ufff1\020\ufff1\050\ufff1\051\ufff1\052\ufff1\053" +
    "\ufff1\054\ufff1\001\002\000\030\004\031\005\004\006\uffc6" +
    "\007\uffc6\017\014\020\uffc6\050\005\051\026\052\020\053" +
    "\007\054\017\001\002\000\014\004\034\005\035\006\033" +
    "\007\036\020\ufff0\001\002\000\004\020\127\001\002\000" +
    "\052\004\uffef\005\uffef\006\uffef\007\uffef\017\uffef\021\uffef" +
    "\027\uffef\036\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044" +
    "\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef" +
    "\054\uffef\001\002\000\052\004\031\005\004\006\uffc6\007" +
    "\uffc6\017\014\021\011\027\uffc6\036\013\040\010\041\016" +
    "\042\027\043\024\044\030\046\006\047\015\050\005\051" +
    "\026\052\020\053\007\054\017\001\002\000\060\002\uffee" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\017\uffee\021\uffee\022" +
    "\uffee\027\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee" +
    "\043\uffee\044\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052" +
    "\uffee\053\uffee\054\uffee\001\002\000\012\020\uffbb\027\uffbb" +
    "\034\uffbb\035\uffbb\001\002\000\060\002\ufffc\004\ufffc\005" +
    "\ufffc\006\ufffc\007\ufffc\017\ufffc\021\ufffc\022\ufffc\027\ufffc" +
    "\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044" +
    "\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc" +
    "\054\ufffc\001\002\000\032\004\031\005\004\006\uffc6\007" +
    "\uffc6\017\014\020\uffc6\021\135\050\005\051\026\052\020" +
    "\053\007\054\017\001\002\000\032\004\031\005\004\006" +
    "\uffc6\007\uffc6\017\014\022\uffc6\025\uffc6\050\005\051\026" +
    "\052\020\053\007\054\017\001\002\000\014\004\034\005" +
    "\035\006\033\007\036\020\137\001\002\000\004\027\140" +
    "\001\002\000\060\002\uffed\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\017\uffed\021\uffed\022\uffed\027\uffed\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\046\uffed\047" +
    "\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\001\002" +
    "\000\004\022\145\001\002\000\016\004\034\005\035\006" +
    "\033\007\036\022\uffc2\025\143\001\002\000\032\004\031" +
    "\005\004\006\uffc6\007\uffc6\017\014\022\uffc6\025\uffc6\050" +
    "\005\051\026\052\020\053\007\054\017\001\002\000\004" +
    "\022\uffc3\001\002\000\004\020\146\001\002\000\060\002" +
    "\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\017\uffe8\021\uffe8" +
    "\022\uffe8\027\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8" +
    "\052\uffe8\053\uffe8\054\uffe8\001\002\000\060\002\ufffd\004" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\017\ufffd\021\ufffd\022\ufffd" +
    "\027\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043" +
    "\ufffd\044\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd" +
    "\053\ufffd\054\ufffd\001\002\000\004\002\000\001\002\000" +
    "\056\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\017\uffff" +
    "\021\uffff\022\uffff\027\uffff\036\uffff\040\uffff\041\uffff\042" +
    "\uffff\043\uffff\044\uffff\046\uffff\047\uffff\050\uffff\051\uffff" +
    "\052\uffff\053\uffff\054\uffff\001\002\000\052\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\017\ufff5\021\ufff5\027\ufff5\036\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\046\ufff5\047" +
    "\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\001\002" +
    "\000\052\004\031\005\004\006\uffc6\007\uffc6\017\014\021" +
    "\011\027\uffc6\036\013\040\010\041\016\042\027\043\024" +
    "\044\030\046\006\047\015\050\005\051\026\052\020\053" +
    "\007\054\017\001\002\000\004\040\155\001\002\000\004" +
    "\017\156\001\002\000\044\004\031\005\004\006\uffc6\007" +
    "\uffc6\011\uffc6\013\067\014\uffc6\017\071\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\050\005\051\026\052\020\053\007\054" +
    "\017\001\002\000\010\020\160\034\075\035\076\001\002" +
    "\000\004\027\ufff4\001\002\000\004\027\162\001\002\000" +
    "\060\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\017\ufff3" +
    "\021\ufff3\022\ufff3\027\ufff3\036\ufff3\037\ufff3\040\ufff3\041" +
    "\ufff3\042\ufff3\043\ufff3\044\ufff3\046\ufff3\047\ufff3\050\ufff3" +
    "\051\ufff3\052\ufff3\053\ufff3\054\ufff3\001\002\000\004\050" +
    "\165\001\002\000\004\027\uffe4\001\002\000\012\012\172" +
    "\023\171\025\uffdf\027\uffdf\001\002\000\006\025\167\027" +
    "\uffe0\001\002\000\004\050\165\001\002\000\004\027\uffe1" +
    "\001\002\000\006\050\174\051\175\001\002\000\032\004" +
    "\031\005\004\006\uffc6\007\uffc6\017\014\025\uffc6\027\uffc6" +
    "\050\005\051\026\052\020\053\007\054\017\001\002\000" +
    "\016\004\034\005\035\006\033\007\036\025\uffde\027\uffde" +
    "\001\002\000\004\024\203\001\002\000\004\024\176\001" +
    "\002\000\010\012\177\025\uffdd\027\uffdd\001\002\000\004" +
    "\021\200\001\002\000\032\004\031\005\004\006\uffc6\007" +
    "\uffc6\017\014\022\uffc6\025\uffc6\050\005\051\026\052\020" +
    "\053\007\054\017\001\002\000\004\022\202\001\002\000" +
    "\006\025\uffdc\027\uffdc\001\002\000\006\025\uffdb\027\uffdb" +
    "\001\002\000\014\004\034\005\035\006\033\007\036\020" +
    "\106\001\002\000\004\017\206\001\002\000\044\004\031" +
    "\005\004\006\uffc6\007\uffc6\011\uffc6\013\067\014\uffc6\017" +
    "\071\030\uffc6\031\uffc6\032\uffc6\033\uffc6\050\005\051\026" +
    "\052\020\053\007\054\017\001\002\000\010\020\210\034" +
    "\075\035\076\001\002\000\052\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\017\ufffb\021\ufffb\027\ufffb\036\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\046\ufffb\047\ufffb\050\ufffb" +
    "\051\ufffb\052\ufffb\053\ufffb\054\ufffb\001\002\000\052\004" +
    "\031\005\004\006\uffc6\007\uffc6\017\014\021\011\027\uffc6" +
    "\036\013\040\010\041\016\042\027\043\024\044\030\046" +
    "\006\047\015\050\005\051\026\052\020\053\007\054\017" +
    "\001\002\000\060\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\017\ufffa\021\ufffa\022\ufffa\027\ufffa\036\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\001\002" +
    "\000\060\002\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\017" +
    "\uffb4\021\uffb4\022\uffb4\027\uffb4\036\uffb4\037\214\040\uffb4" +
    "\041\uffb4\042\uffb4\043\uffb4\044\uffb4\046\uffb4\047\uffb4\050" +
    "\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\001\002\000\052" +
    "\004\031\005\004\006\uffc6\007\uffc6\017\014\021\011\027" +
    "\uffc6\036\013\040\010\041\016\042\027\043\024\044\030" +
    "\046\006\047\015\050\005\051\026\052\020\053\007\054" +
    "\017\001\002\000\060\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\017\ufff9\021\ufff9\022\ufff9\027\ufff9\036\ufff9\037" +
    "\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\046\ufff9" +
    "\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\001" +
    "\002\000\060\002\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5" +
    "\017\uffb5\021\uffb5\022\uffb5\027\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\046\uffb5\047\uffb5" +
    "\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\001\002\000" +
    "\060\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\017\ufffe" +
    "\021\ufffe\022\ufffe\027\ufffe\036\ufffe\037\ufffe\040\ufffe\041" +
    "\ufffe\042\ufffe\043\ufffe\044\ufffe\046\ufffe\047\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\053\ufffe\054\ufffe\001\002\000\052\004" +
    "\031\005\004\006\uffc6\007\uffc6\017\014\021\011\027\uffc6" +
    "\036\013\040\010\041\016\042\027\043\024\044\030\046" +
    "\006\047\015\050\005\051\026\052\020\053\007\054\017" +
    "\001\002\000\054\004\031\005\004\006\uffc6\007\uffc6\017" +
    "\014\021\011\022\222\027\uffc6\036\013\040\010\041\016" +
    "\042\027\043\024\044\030\046\006\047\015\050\005\051" +
    "\026\052\020\053\007\054\017\001\002\000\060\002\uffe6" +
    "\004\uffe6\005\uffe6\006\uffe6\007\uffe6\017\uffe6\021\uffe6\022" +
    "\uffe6\027\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\043\uffe6\044\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\054\uffe6\001\002\000\004\017\ufff8\001\002" +
    "\000\004\017\225\001\002\000\044\004\031\005\004\006" +
    "\uffc6\007\uffc6\011\uffc6\013\067\014\uffc6\017\071\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\050\005\051\026\052\020\053" +
    "\007\054\017\001\002\000\010\020\227\034\075\035\076" +
    "\001\002\000\052\004\ufff7\005\ufff7\006\ufff7\007\ufff7\017" +
    "\ufff7\021\ufff7\027\ufff7\036\ufff7\040\ufff7\041\ufff7\042\ufff7" +
    "\043\ufff7\044\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052" +
    "\ufff7\053\ufff7\054\ufff7\001\002\000\052\004\031\005\004" +
    "\006\uffc6\007\uffc6\017\014\021\011\027\uffc6\036\013\040" +
    "\010\041\016\042\027\043\024\044\030\046\006\047\015" +
    "\050\005\051\026\052\020\053\007\054\017\001\002\000" +
    "\060\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\017\ufff6" +
    "\021\ufff6\022\ufff6\027\ufff6\036\ufff6\037\ufff6\040\ufff6\041" +
    "\ufff6\042\ufff6\043\ufff6\044\ufff6\046\ufff6\047\ufff6\050\ufff6" +
    "\051\ufff6\052\ufff6\053\ufff6\054\ufff6\001\002\000\004\050" +
    "\uffe3\001\002\000\004\050\165\001\002\000\004\027\uffe2" +
    "\001\002\000\006\016\250\050\251\001\002\000\030\004" +
    "\031\005\004\006\uffc6\007\uffc6\017\014\024\uffc6\050\005" +
    "\051\026\052\020\053\007\054\017\001\002\000\062\004" +
    "\031\005\004\006\uffc6\007\uffc6\011\uffc6\014\uffc6\017\014" +
    "\020\uffc6\021\240\022\uffc6\024\uffc6\025\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\050\005" +
    "\051\026\052\020\053\007\054\017\001\002\000\032\004" +
    "\031\005\004\006\uffc6\007\uffc6\017\014\022\uffc6\025\uffc6" +
    "\050\005\051\026\052\020\053\007\054\017\001\002\000" +
    "\044\004\034\005\035\006\033\007\036\011\uffcd\014\uffcd" +
    "\020\uffcd\022\uffcd\024\uffcd\025\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\001\002\000\004" +
    "\022\243\001\002\000\044\004\uffca\005\uffca\006\uffca\007" +
    "\uffca\011\uffca\014\uffca\020\uffca\022\uffca\024\uffca\025\uffca" +
    "\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\001\002\000\014\004\034\005\035\006\033\007\036" +
    "\024\245\001\002\000\046\004\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\011\uffd5\012\246\014\uffd5\020\uffd5\022\uffd5\024\uffd5" +
    "\025\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\001\002\000\060\004\031\005\004\006\uffc6" +
    "\007\uffc6\011\uffc6\014\uffc6\017\014\020\uffc6\022\uffc6\024" +
    "\uffc6\025\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\050\005\051\026\052\020\053\007\054" +
    "\017\001\002\000\044\004\034\005\035\006\033\007\036" +
    "\011\uffcc\014\uffcc\020\uffcc\022\uffcc\024\uffcc\025\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc" +
    "\001\002\000\044\004\uffc9\005\uffc9\006\uffc9\007\uffc9\011" +
    "\uffc9\014\uffc9\020\uffc9\022\uffc9\024\uffc9\025\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\001" +
    "\002\000\046\004\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7" +
    "\012\252\014\uffc7\020\uffc7\022\uffc7\024\uffc7\025\uffc7\027" +
    "\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\001\002\000\060\004\031\005\004\006\uffc6\007\uffc6\011" +
    "\uffc6\014\uffc6\017\014\020\uffc6\022\uffc6\024\uffc6\025\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\050\005\051\026\052\020\053\007\054\017\001\002" +
    "\000\044\004\034\005\035\006\033\007\036\011\uffc8\014" +
    "\uffc8\020\uffc8\022\uffc8\024\uffc8\025\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\001\002\000" +
    "\044\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\014\uffd0" +
    "\020\uffd0\022\uffd0\024\uffd0\025\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\014\002\020\003\021\004\024\005\022\012" +
    "\011\001\001\000\004\012\253\001\001\000\002\001\001" +
    "\000\012\003\231\004\024\005\022\012\011\001\001\000" +
    "\002\001\001\000\004\014\222\001\001\000\004\034\217" +
    "\001\001\000\002\001\001\000\004\014\204\001\001\000" +
    "\004\012\203\001\001\000\004\035\162\001\001\000\004" +
    "\014\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\150\004\024\005\022\012\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\060\001\001\000\002" +
    "\001\001\000\004\012\031\001\001\000\002\001\001\000" +
    "\004\012\041\001\001\000\004\012\040\001\001\000\004" +
    "\012\037\001\001\000\004\012\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\052\001\001\000\004\012\044\001\001\000" +
    "\002\001\001\000\004\010\046\001\001\000\004\015\047" +
    "\001\001\000\004\032\050\001\001\000\012\003\051\004" +
    "\024\005\022\012\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\054\001\001\000\002\001\001\000" +
    "\004\033\056\001\001\000\012\003\057\004\024\005\022" +
    "\012\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\062\001\001\000\002\001\001\000\004\026\064" +
    "\001\001\000\006\012\065\013\067\001\001\000\002\001" +
    "\001\000\006\012\065\013\131\001\001\000\002\001\001" +
    "\000\006\012\072\013\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\101\001\001" +
    "\000\004\040\077\001\001\000\002\001\001\000\006\012" +
    "\065\013\100\001\001\000\002\001\001\000\006\012\065" +
    "\013\102\001\001\000\002\001\001\000\004\012\117\001" +
    "\001\000\004\012\116\001\001\000\002\001\001\000\004" +
    "\012\115\001\001\000\004\012\114\001\001\000\004\012" +
    "\113\001\001\000\004\012\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\121\001\001" +
    "\000\002\001\001\000\004\027\123\001\001\000\004\012" +
    "\124\001\001\000\004\030\125\001\001\000\002\001\001" +
    "\000\004\031\127\001\001\000\012\003\130\004\024\005" +
    "\022\012\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\135\001\001\000\006\011" +
    "\140\012\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\143\012\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\152\001\001\000\012" +
    "\003\153\004\024\005\022\012\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\065\013\156\001\001" +
    "\000\002\001\001\000\004\025\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\163\007\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\167\007\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\200\012\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\065\013\206\001\001\000" +
    "\002\001\001\000\004\020\210\001\001\000\012\003\211" +
    "\004\024\005\022\012\011\001\001\000\004\021\212\001" +
    "\001\000\004\016\214\001\001\000\012\003\215\004\024" +
    "\005\022\012\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\220\003\021\004\024" +
    "\005\022\012\011\001\001\000\012\003\150\004\024\005" +
    "\022\012\011\001\001\000\002\001\001\000\004\022\223" +
    "\001\001\000\002\001\001\000\006\012\065\013\225\001" +
    "\001\000\002\001\001\000\004\023\227\001\001\000\012" +
    "\003\230\004\024\005\022\012\011\001\001\000\002\001" +
    "\001\000\004\036\232\001\001\000\006\006\233\007\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\243\001\001\000\004\012\240\001\001\000\006\011\241" +
    "\012\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\252\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



 public void syntax_error(Symbol cur_token){
	}

 public void unrecovered_syntax_error(Symbol cur_token){
        System.err.println("Syntax error en linea" + PLXC.lex.getLine() + ", columna " + PLXC.lex.getColumna() + " con el token "+ sym.terminalNames[cur_token.sym]);
        // report_error("Syntax error", null);
        done_parsing();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    private int nVar = 0;
    class ParEt{public String sv,sf;

      public ParEt(String v,String f){
        sv = v;
        sf = f;
      }

    }

    public void MatrizComprobar(String s,String t){
      ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());
      PLXC.out.println("if ("+s+" < 0) goto "+e.sf+";");
      PLXC.out.println("if ("+t+" < "+ s+") goto "+e.sf+";");
      PLXC.out.println("if ("+t+" == "+ s+") goto "+e.sf+";");
      PLXC.out.println("goto "+e.sv+";");
      PLXC.out.println(e.sf+":");
      tablaS.Error();
      PLXC.out.println(e.sv+":");

    }
    public ArrayList<Objeto> reversa(ArrayList<Objeto> m){
      ArrayList<Objeto> res = new ArrayList<Objeto>();
      for(int i = m.size()-1;i>=0;i--){
         res.add(m.get(i));
      }
      return res;
    }
    public String tipoD;
    public Tipo getTipo(boolean matriz){
      Tipo res = null;
      switch(tipoD){
         case "int":
            if(matriz){
               res = TMInt.getInstancia();
            }else{
               res = TInt.getInstancia();
            }
            break;
         case "float":
            if(matriz){
               res = TMFloat.getInstancia();
            }else{
               res = TFloat.getInstancia();
            }
            break;
         case "char":
            if(matriz){
               res = TMChar.getInstancia();
            }else{
               res = TChar.getInstancia();
            }
            break;
         case "string":
               res = TString.getInstancia();
               break;
         case "struct":
               res = Struct.getInstancia();
               break;
         default:
            tablaS.Error();
            break;
      }
      return res;
    }

    public TablaSimbolos tablaS = new TablaSimbolos();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Lista_de_sent ::= Sentencia 
            { parser.Tree.reduce(1,"Lista_de_sent",0);
              Vector<Objeto> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Objeto> s = (Vector<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Lista_de_sent EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector<Objeto> start_val = (Vector<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_de_sent ::= Lista_de_sent Sentencia 
            { parser.Tree.reduce(2,"Lista_de_sent",0);
              Vector<Objeto> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector<Objeto> l = (Vector<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Objeto> s = (Vector<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(s != null && l != null){l.addAll(s); RESULT = l;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Sentencia ::= Expresion PYC 
            { parser.Tree.reduce(2,"Sentencia",1);
              Vector<Objeto> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Sentencia ::= Declaracion PYC 
            { parser.Tree.reduce(2,"Sentencia",1);
              Vector<Objeto> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector<Objeto> d = (Vector<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Sentencia ::= Asignacion PYC 
            { parser.Tree.reduce(2,"Sentencia",1);
              Vector<Objeto> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            { parser.Tree.reduce(0,"NT$0",0);
              Vector<Objeto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            { parser.Tree.reduce(0,"NT$1",0);
              Vector<Objeto> RESULT =(Vector<Objeto>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 PLXC.out.println("goto "+e+";");PLXC.out.println(c.sf +":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Sentencia ::= IF etiq_salto AP Condicion CP NT$0 Sentencia NT$1 else_If 
            { parser.Tree.reduce(9,"Sentencia",1);
              Vector<Objeto> RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Vector<Objeto>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 PLXC.out.println(e+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            { parser.Tree.reduce(0,"NT$2",0);
              Vector<Objeto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.out.println(e+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$3 ::= 
            { parser.Tree.reduce(0,"NT$3",0);
              Vector<Objeto> RESULT =(Vector<Objeto>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sentencia ::= WHILE etiq_salto NT$2 AP Condicion CP NT$3 Sentencia 
            { parser.Tree.reduce(8,"Sentencia",1);
              Vector<Objeto> RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Vector<Objeto>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 PLXC.out.println("goto "+e+";");PLXC.out.println(c.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$4 ::= 
            { parser.Tree.reduce(0,"NT$4",0);
              Vector<Objeto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.out.println(e+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$5 ::= 
            { parser.Tree.reduce(0,"NT$5",0);
              Vector<Objeto> RESULT =(Vector<Objeto>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c.sv+":");PLXC.out.println("goto "+e+";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Sentencia ::= DO etiq_salto NT$4 Sentencia WHILE AP Condicion CP NT$5 PYC 
            { parser.Tree.reduce(10,"Sentencia",1);
              Vector<Objeto> RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Vector<Objeto>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 PLXC.out.println(c.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$6 ::= 
            { parser.Tree.reduce(0,"NT$6",0);
              Vector<Objeto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(e.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            { parser.Tree.reduce(0,"NT$7",0);
              Vector<Objeto> RESULT =(Vector<Objeto>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(e.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$8 ::= 
            { parser.Tree.reduce(0,"NT$8",0);
              Vector<Objeto> RESULT =(Vector<Objeto>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.out.println("goto "+e.sv+" ;"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$9 ::= 
            { parser.Tree.reduce(0,"NT$9",0);
              Vector<Objeto> RESULT =(Vector<Objeto>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 PLXC.out.println(c.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= FOR etiq_bucle AP Expresion PYC NT$6 Condicion PYC NT$7 Expresion NT$8 CP NT$9 Sentencia 
            { parser.Tree.reduce(14,"Sentencia",1);
              Vector<Objeto> RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Vector<Objeto>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 PLXC.out.println("goto "+e.sf+";");PLXC.out.println(c.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Sentencia ::= PRINT AP Expresion CP PYC 
            { parser.Tree.reduce(5,"Sentencia",1);
              Vector<Objeto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Vector<Objeto> p = new Vector<Objeto>();e.metodos("print",p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$10 ::= 
            { parser.Tree.reduce(0,"NT$10",0);
              Vector<Objeto> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.out.println("$"+cont+" = 1;");PLXC.out.println(e.sf+":");PLXC.out.println("if("+e1.getNombre()+"< $"+cont+") goto "+e.sv+";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Sentencia ::= REPEAT AP Expresion CP nom_obj etiq_bucle NT$10 Sentencia 
            { parser.Tree.reduce(8,"Sentencia",1);
              Vector<Objeto> RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Vector<Objeto>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 PLXC.out.println("$"+cont+" = $"+cont+" + 1;");PLXC.out.println("goto "+e.sf+";");PLXC.out.println(e.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$11 ::= 
            { parser.Tree.reduce(0,"NT$11",0);
              Vector<Objeto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 String cont = Objeto.newNumObj();String v = Objeto.newNumObj();PLXC.out.println("$"+v+" = "+e1.getNombre()+";");PLXC.out.println(e.sf+":");PLXC.out.println("$"+cont+" = $"+cont+" + 1;");PLXC.out.println("if($"+v+"< $"+cont+") goto "+e.sv+";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Sentencia ::= REPEAT JUST etiq_bucle AP Expresion CP NT$11 Sentencia 
            { parser.Tree.reduce(8,"Sentencia",1);
              Vector<Objeto> RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Vector<Objeto>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParEt e = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 PLXC.out.println("goto "+e.sf+";");PLXC.out.println(e.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Sentencia ::= PRINT AP ALL Matriz_aux CLL CP 
            { parser.Tree.reduce(6,"Sentencia",1);
              Vector<Objeto> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Objeto> m = (ArrayList<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 m = reversa(m);for(Objeto o:m){Vector<Objeto> p = new Vector<Objeto>();o.metodos("print",p);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$12 ::= 
            { parser.Tree.reduce(0,"NT$12",0);
              Vector<Objeto> RESULT =null;
  tablaS.newBloque(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Sentencia ::= ALL NT$12 Lista_de_sent CLL 
            { parser.Tree.reduce(4,"Sentencia",1);
              Vector<Objeto> RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Vector<Objeto>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector<Objeto> l = (Vector<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 tablaS.borrarBloque(); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$13 ::= 
            { parser.Tree.reduce(0,"NT$13",0);
              Vector<Objeto> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tipoD = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Declaracion ::= TIPO NT$13 Lista 
            { parser.Tree.reduce(3,"Declaracion",0);
              Vector<Objeto> RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Vector<Objeto>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Objeto> l = (Vector<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tipoD = ""; RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$14 ::= 
            { parser.Tree.reduce(0,"NT$14",0);
              Vector<Objeto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Objeto> e = (Vector<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tipoD = "struct"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Declaracion ::= STRUCT Sentencia NT$14 Lista 
            { parser.Tree.reduce(4,"Declaracion",0);
              Vector<Objeto> RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Vector<Objeto>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector<Objeto> e = (Vector<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Objeto> l = (Vector<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 for(Objeto o:l){o.metodos("anadir",e);tablaS.addObj(o);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Lista ::= Lista_aux COMA Lista 
            { parser.Tree.reduce(3,"Lista",0);
              Vector<Objeto> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto o = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Objeto> l = (Vector<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(o);RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Lista ::= Lista_aux 
            { parser.Tree.reduce(1,"Lista",0);
              Vector<Objeto> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto o = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Vector<Objeto> l = new Vector<Objeto>(); l.add(o);RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Lista_aux ::= IDENT 
            { parser.Tree.reduce(1,"Lista_aux",0);
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                              if(!tablaS.contiene(i)){
                                                                  Instancia o = new Instancia(i,getTipo(false),tablaS.bActual,true);
                                                                  tablaS.addObj(o);
                                                                  RESULT = o;
                                                               }else{ 
                                                                  tablaS.Error();
                                                               }
                                                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_aux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Lista_aux ::= IDENT ASIGNA Expresion 
            { parser.Tree.reduce(3,"Lista_aux",0);
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                                                             if(!tablaS.contiene(i)){
                                                                  Instancia o = new Instancia(i,getTipo(false),tablaS.bActual,true);
                                                                  tablaS.addObj(o);
                                                               }else{ 
                                                                  tablaS.Error();
                                                               }
                                                             Objeto o = tablaS.objeto(i);
                                                             if (!(o instanceof Instancia)) {
                                                                tablaS.Error();
                                                             }
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             p.add(e);
                                                             o.metodos("asigna", p);
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_aux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Lista_aux ::= IDENT AC ENTERO CC 
            { parser.Tree.reduce(4,"Lista_aux",0);
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                              if(!tablaS.contiene(i)){
                                                                  Instancia o = new Instancia(i,getTipo(true),tablaS.bActual,true);
                                                                  tablaS.addObj(o);
                                                                  tablaS.addTam(o,Integer.parseInt(e));
                                                                  PLXC.out.println(i+"_length = "+e+";");

                                                               }else{ 
                                                                  tablaS.Error();
                                                               }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_aux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Lista_aux ::= IDENT AC ENTERO CC ASIGNA ALL Matriz_aux CLL 
            { parser.Tree.reduce(8,"Lista_aux",0);
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Objeto> m = (ArrayList<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                              if(!tablaS.contiene(i)){
                                                                  Instancia o = new Instancia(i,getTipo(true),tablaS.bActual,true);
                                                                  tablaS.addObj(o);
                                                                  tablaS.addTam(o,Integer.parseInt(e));
                                                                  PLXC.out.println(i+"_length = "+e+";");
                                                                  m = reversa(m);
                                                                  int pos = 0;
                                                                  for(Objeto v: m){
                                                                     Vector<Objeto> p = new Vector<Objeto>();
                                                                     p.add(v);
                                                                     Instancia tam = new Instancia(String.valueOf(pos),TInt.getInstancia(),0,false);
                                                                     p.add(tam);
                                                                     o.metodos("asignaInd", p);
                                                                     pos++;
                                                                  }
                                                               }else{ 
                                                                  tablaS.Error();
                                                               }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_aux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Lista_aux ::= IDENT AC IDENT CC 
            { parser.Tree.reduce(4,"Lista_aux",0);
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 tablaS.Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_aux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expresion ::= ENTERO 
            { parser.Tree.reduce(1,"Expresion",0);
              Objeto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Instancia o = new Instancia(e,TInt.getInstancia(),tablaS.bActual,false);RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expresion ::= FLOAT 
            { parser.Tree.reduce(1,"Expresion",0);
              Objeto RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Instancia o = new Instancia(f,TFloat.getInstancia(),tablaS.bActual,false);RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expresion ::= CHAR 
            { parser.Tree.reduce(1,"Expresion",0);
              Objeto RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Instancia o = new Instancia(c,TChar.getInstancia(),tablaS.bActual,false);RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expresion ::= STRING 
            { parser.Tree.reduce(1,"Expresion",0);
              Objeto RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Instancia o = new Instancia(s,TString.getInstancia(),tablaS.bActual,false);RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresion ::= IDENT 
            { parser.Tree.reduce(1,"Expresion",0);
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tablaS.objeto(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expresion ::= IDENT AC Expresion CC 
            { parser.Tree.reduce(4,"Expresion",0);
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Objeto obj = tablaS.objeto(i); Vector<Objeto> p = new Vector<Objeto>();Instancia o = new Instancia(e.getNombre(),TInt.getInstancia(),tablaS.bActual,false);p.add(o); RESULT = obj.metodos("obtener",p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion ::= Expresion MAS Expresion 
            { parser.Tree.reduce(3,"Expresion",0);
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             if(((Instancia) e1).getTipo() == TFloat.getInstancia()){
                                                                p.add(e2);
                                                                RESULT = e1.metodos("suma", p);
                                                             }else if(((Instancia) e2).getTipo() == TFloat.getInstancia()){
                                                                p.add(e1);
                                                                RESULT = e2.metodos("suma", p);
                                                             }else if(((Instancia) e1).getTipo() == TInt.getInstancia()){
                                                                p.add(e2);
                                                                RESULT = e1.metodos("suma",p);
                                                             }else if(((Instancia) e2).getTipo() == TInt.getInstancia()){
                                                                p.add(e1);
                                                                RESULT = e2.metodos("suma",p);
                                                             }else{
                                                                p.add(e2);
                                                                RESULT = e1.metodos("suma", p);
                                                             }
                                                             
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= Expresion MENOS Expresion 
            { parser.Tree.reduce(3,"Expresion",0);
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             if(((Instancia) e1).getTipo() == TFloat.getInstancia()){
                                                                p.add(e2);
                                                                RESULT = e1.metodos("resta", p);
                                                             }else if(((Instancia) e2).getTipo() == TFloat.getInstancia()){
                                                                p.add(e1);
                                                                RESULT = e2.metodos("resta", p);
                                                             }else{
                                                                p.add(e2);
                                                                RESULT = e1.metodos("resta", p);
                                                             }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresion ::= Expresion MULT Expresion 
            { parser.Tree.reduce(3,"Expresion",0);
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             if(((Instancia) e1).getTipo() == TFloat.getInstancia()){
                                                                p.add(e2);
                                                                RESULT = e1.metodos("multiplicar", p);
                                                             }else if(((Instancia) e2).getTipo() == TFloat.getInstancia()){
                                                                p.add(e1);
                                                                RESULT = e2.metodos("multiplicar", p);
                                                             }else{
                                                                p.add(e2);
                                                                RESULT = e1.metodos("multiplicar", p);
                                                             }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion ::= Expresion DIVID Expresion 
            { parser.Tree.reduce(3,"Expresion",0);
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             if(((Instancia) e1).getTipo() == TFloat.getInstancia()){
                                                                p.add(e2);
                                                                RESULT = e1.metodos("dividir", p);
                                                             }else if(((Instancia) e2).getTipo() == TFloat.getInstancia()){
                                                                p.add(e1);
                                                                RESULT = e2.metodos("dividir", p);
                                                             }else{
                                                                p.add(e2);
                                                                RESULT = e1.metodos("dividir", p);
                                                             }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expresion ::= MENOS Expresion 
            { parser.Tree.reduce(2,"Expresion",0);
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             RESULT = e1.metodos("menosUnario",p);
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion ::= MAS Expresion 
            { parser.Tree.reduce(2,"Expresion",0);
              Objeto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                            Vector<Objeto> p = new Vector<Objeto>();
                                                            RESULT = e1.metodos("masUnario",p);
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion ::= AP Expresion CP 
            { parser.Tree.reduce(3,"Expresion",0);
              Objeto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion ::= IDENT ASIGNA Expresion 
            { parser.Tree.reduce(3,"Expresion",0);
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                             if (!tablaS.contiene(i)) {
                                                                tablaS.Error();
                                                             }
                                                             Objeto o = tablaS.objeto(i);
                                                             if (!(o instanceof Instancia)) {
                                                                tablaS.Error();
                                                             }
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             p.add(e);
                                                             RESULT = o.metodos("asigna", p);
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion ::= IDENT AC Expresion CC ASIGNA Expresion 
            { parser.Tree.reduce(6,"Expresion",0);
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                             

                                                             
                                                             if (!tablaS.contiene(i)) {
                                                                tablaS.Error();
                                                             }
                                                             Objeto o = tablaS.objeto(i);
                                                             if (!(o instanceof Instancia)) {
                                                                tablaS.Error();
                                                             }
                                                             MatrizComprobar(e1.getNombre(),tablaS.getTam(o));
                                                             Vector<Objeto> p = new Vector<Objeto>();
                                                             if(((Instancia) o).getTipo() == TMFloat.getInstancia() && ((Instancia) e2).getTipo() == TInt.getInstancia()){
                                                               Vector<Objeto> p2 = new Vector<Objeto>();
                                                               p2.add(TFloat.getInstancia());
                                                               e2 = e2.metodos("convertir",p2);
                                                             }
                                                             p.add(e2);
                                                             Instancia tam = new Instancia(e1.getNombre(),TInt.getInstancia(),0,false);
                                                             p.add(tam);
                                                             RESULT = o.metodos("asignaInd", p);
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion ::= AP TIPO CP Expresion 
            { parser.Tree.reduce(4,"Expresion",0);
              Objeto RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                            Vector<Objeto> p = new Vector<Objeto>();
                                                            switch(t){
                                                                case "int":
                                                                    p.add(TInt.getInstancia());
                                                                    break;
                                                                case "float":
                                                                    p.add(TFloat.getInstancia());
                                                                    break;
                                                                case "char":
                                                                    p.add(TChar.getInstancia());
                                                                    break;
                                                                default:
                                                                    TablaSimbolos.Error();
                                                                    break;
                                                            }
                                                            RESULT = e.metodos("convertir", p);
            
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion ::= IDENT ASIGNA ALL Matriz_aux CLL 
            { parser.Tree.reduce(5,"Expresion",0);
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Objeto> m = (ArrayList<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                            if (!tablaS.contiene(i)) {
                                                                tablaS.Error();
                                                             }
                                                             Objeto o = tablaS.objeto(i);
                                                             if (!(o instanceof Instancia)) {
                                                                tablaS.Error();
                                                             }
                                                             if(m.size()>Integer.valueOf(tablaS.getTam(o))){
                                                               tablaS.Error();
                                                             }
                                                             m = reversa(m);
                                                             int pos = 0;
                                                            for(Objeto v: m){
                                                                Vector<Objeto> p = new Vector<Objeto>();
                                                                p.add(v);
                                                                Instancia tam = new Instancia(String.valueOf(pos),TInt.getInstancia(),0,false);
                                                                p.add(tam);
                                                                o.metodos("asignaInd", p);
                                                                pos++;
                                                            }
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expresion ::= IDENT PUNTO LENGTH 
            { parser.Tree.reduce(3,"Expresion",0);
              Objeto RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Instancia(i+"_"+l,TInt.getInstancia(),0,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expresion ::= IDENT PUNTO IDENT ASIGNA Expresion 
            { parser.Tree.reduce(5,"Expresion",0);
              Objeto RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expresion ::= IDENT PUNTO IDENT 
            { parser.Tree.reduce(3,"Expresion",0);
              Objeto RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expresion ::= 
            { parser.Tree.reduce(0,"Expresion",0);
              Objeto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Struct_aux ::= IDENT PUNTO Struct_aux 
            { parser.Tree.reduce(3,"Struct_aux",0);
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Struct_aux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Struct_aux ::= IDENT 
            { parser.Tree.reduce(1,"Struct_aux",0);
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Struct_aux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Matriz_aux ::= Expresion COMA Matriz_aux 
            { parser.Tree.reduce(3,"Matriz_aux",0);
              ArrayList<Objeto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Objeto> m = (ArrayList<Objeto>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 m.add(e); RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Matriz_aux",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Matriz_aux ::= Expresion 
            { parser.Tree.reduce(1,"Matriz_aux",0);
              ArrayList<Objeto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<Objeto> m = new ArrayList<Objeto>();m.add(e); RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Matriz_aux",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Condicion ::= Expresion IGUAL Expresion 
            { parser.Tree.reduce(3,"Condicion",0);
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e1.getNombre()+"=="+e2.getNombre()+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Condicion ::= Expresion DIF Expresion 
            { parser.Tree.reduce(3,"Condicion",0);
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e1.getNombre()+"=="+e2.getNombre()+") goto "+e.sf+";");PLXC.out.println("goto "+e.sv+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Condicion ::= Expresion MENOR Expresion 
            { parser.Tree.reduce(3,"Condicion",0);
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e1.getNombre()+"<"+e2.getNombre()+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Condicion ::= Expresion MENIG Expresion 
            { parser.Tree.reduce(3,"Condicion",0);
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e1.getNombre()+"=="+e2.getNombre()+") goto "+e.sv+";");PLXC.out.println("if("+e1.getNombre()+"<"+e2.getNombre()+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Condicion ::= Expresion MAYOR Expresion 
            { parser.Tree.reduce(3,"Condicion",0);
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e2.getNombre()+"<"+e1.getNombre()+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Condicion ::= Expresion MAYIG Expresion 
            { parser.Tree.reduce(3,"Condicion",0);
              ParEt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto e1 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto e2 = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println("if("+e1.getNombre()+"=="+e2.getNombre()+") goto "+e.sv+";");PLXC.out.println("if("+e2.getNombre()+"<"+e1.getNombre()+") goto "+e.sv+";");PLXC.out.println("goto "+e.sf+";");RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Condicion ::= NOT Condicion 
            { parser.Tree.reduce(2,"Condicion",0);
              ParEt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt p = new ParEt(c.sf,c.sv);RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$15 ::= 
            { parser.Tree.reduce(0,"NT$15",0);
              ParEt RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c1.sv+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Condicion ::= Condicion AND NT$15 Condicion 
            { parser.Tree.reduce(4,"Condicion",0);
              ParEt RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (ParEt) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c2 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt p = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println(c2.sv+":"); PLXC.out.println("goto "+p.sv+";");PLXC.out.println(c1.sf+":");PLXC.out.println(c2.sf+":");PLXC.out.println("goto "+p.sf+";");RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$16 ::= 
            { parser.Tree.reduce(0,"NT$16",0);
              ParEt RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.out.println(c1.sf+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Condicion ::= Condicion OR NT$16 Condicion 
            { parser.Tree.reduce(4,"Condicion",0);
              ParEt RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (ParEt) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParEt c1 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParEt c2 = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParEt p = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());PLXC.out.println(c2.sf+":"); PLXC.out.println("goto "+p.sf+";");PLXC.out.println(c1.sv+":");PLXC.out.println(c2.sv+":");PLXC.out.println("goto "+p.sv+";");RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Condicion ::= AP Condicion CP 
            { parser.Tree.reduce(3,"Condicion",0);
              ParEt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParEt c = (ParEt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // else_If ::= ELSE Sentencia 
            { parser.Tree.reduce(2,"else_If",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_If",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // else_If ::= 
            { parser.Tree.reduce(0,"else_If",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_If",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // etiq_salto ::= 
            { parser.Tree.reduce(0,"etiq_salto",0);
              String RESULT =null;
		 RESULT = tablaS.newEtiq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiq_salto",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // etiq_bucle ::= 
            { parser.Tree.reduce(0,"etiq_bucle",0);
              ParEt RESULT =null;
		 ParEt e = new ParEt(tablaS.newEtiq(),tablaS.newEtiq());RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiq_bucle",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // nom_obj ::= 
            { parser.Tree.reduce(0,"nom_obj",0);
              String RESULT =null;
		 RESULT = Objeto.newNumObj(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nom_obj",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
